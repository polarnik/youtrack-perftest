/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * IssueComment
 */


public class IssueComment {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("attachments")
    private List<IssueAttachment> attachments = null;

    @SerializedName("author")
    private User author = null;

    @SerializedName("created")
    private final Long created = null;

    @SerializedName("deleted")
    private Boolean deleted = null;

    @SerializedName("issue")
    private Issue issue = null;

    @SerializedName("pinned")
    private Boolean pinned = null;

    @SerializedName("reactions")
    private List<Reaction> reactions = null;

    @SerializedName("text")
    private String text = null;

    @SerializedName("textPreview")
    private final String textPreview = null;

    @SerializedName("updated")
    private final Long updated = null;

    @SerializedName("visibility")
    private Visibility visibility = null;

    @SerializedName("$type")
    private String $type = null;

    public IssueComment() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public IssueComment attachments(List<IssueAttachment> attachments) {
        this.attachments = attachments;
        return this;
    }

    public IssueComment addAttachmentsItem(IssueAttachment attachmentsItem) {
        if (this.attachments == null) {
            this.attachments = new ArrayList<IssueAttachment>();
        }
        this.attachments.add(attachmentsItem);
        return this;
    }

    /**
     * Get attachments
     *
     * @return attachments
     **/
    @Schema(description = "")
    public List<IssueAttachment> getAttachments() {
        return attachments;
    }

    public void setAttachments(List<IssueAttachment> attachments) {
        this.attachments = attachments;
    }

    public IssueComment author(User author) {
        this.author = author;
        return this;
    }

    /**
     * Get author
     *
     * @return author
     **/
    @Schema(description = "")
    public User getAuthor() {
        return author;
    }

    public void setAuthor(User author) {
        this.author = author;
    }

    /**
     * Get created
     *
     * @return created
     **/
    @Schema(description = "")
    public Long getCreated() {
        return created;
    }

    public IssueComment deleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Get deleted
     *
     * @return deleted
     **/
    @Schema(description = "")
    public Boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public IssueComment issue(Issue issue) {
        this.issue = issue;
        return this;
    }

    /**
     * Get issue
     *
     * @return issue
     **/
    @Schema(description = "")
    public Issue getIssue() {
        return issue;
    }

    public void setIssue(Issue issue) {
        this.issue = issue;
    }

    public IssueComment pinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }

    /**
     * Get pinned
     *
     * @return pinned
     **/
    @Schema(description = "")
    public Boolean isPinned() {
        return pinned;
    }

    public void setPinned(Boolean pinned) {
        this.pinned = pinned;
    }

    public IssueComment reactions(List<Reaction> reactions) {
        this.reactions = reactions;
        return this;
    }

    public IssueComment addReactionsItem(Reaction reactionsItem) {
        if (this.reactions == null) {
            this.reactions = new ArrayList<Reaction>();
        }
        this.reactions.add(reactionsItem);
        return this;
    }

    /**
     * Get reactions
     *
     * @return reactions
     **/
    @Schema(description = "")
    public List<Reaction> getReactions() {
        return reactions;
    }

    public void setReactions(List<Reaction> reactions) {
        this.reactions = reactions;
    }

    public IssueComment text(String text) {
        this.text = text;
        return this;
    }

    /**
     * Get text
     *
     * @return text
     **/
    @Schema(description = "")
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    /**
     * Get textPreview
     *
     * @return textPreview
     **/
    @Schema(description = "")
    public String getTextPreview() {
        return textPreview;
    }

    /**
     * Get updated
     *
     * @return updated
     **/
    @Schema(description = "")
    public Long getUpdated() {
        return updated;
    }

    public IssueComment visibility(Visibility visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get visibility
     *
     * @return visibility
     **/
    @Schema(description = "")
    public Visibility getVisibility() {
        return visibility;
    }

    public void setVisibility(Visibility visibility) {
        this.visibility = visibility;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IssueComment issueComment = (IssueComment) o;
        return Objects.equals(this.id, issueComment.id) &&
                Objects.equals(this.attachments, issueComment.attachments) &&
                Objects.equals(this.author, issueComment.author) &&
                Objects.equals(this.created, issueComment.created) &&
                Objects.equals(this.deleted, issueComment.deleted) &&
                Objects.equals(this.issue, issueComment.issue) &&
                Objects.equals(this.pinned, issueComment.pinned) &&
                Objects.equals(this.reactions, issueComment.reactions) &&
                Objects.equals(this.text, issueComment.text) &&
                Objects.equals(this.textPreview, issueComment.textPreview) &&
                Objects.equals(this.updated, issueComment.updated) &&
                Objects.equals(this.visibility, issueComment.visibility) &&
                Objects.equals(this.$type, issueComment.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, attachments, author, created, deleted, issue, pinned, reactions, text, textPreview, updated, visibility, $type);
    }


    @Override
    public String toString() {

        String sb = "class IssueComment {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    attachments: " + toIndentedString(attachments) + "\n" +
                "    author: " + toIndentedString(author) + "\n" +
                "    created: " + toIndentedString(created) + "\n" +
                "    deleted: " + toIndentedString(deleted) + "\n" +
                "    issue: " + toIndentedString(issue) + "\n" +
                "    pinned: " + toIndentedString(pinned) + "\n" +
                "    reactions: " + toIndentedString(reactions) + "\n" +
                "    text: " + toIndentedString(text) + "\n" +
                "    textPreview: " + toIndentedString(textPreview) + "\n" +
                "    updated: " + toIndentedString(updated) + "\n" +
                "    visibility: " + toIndentedString(visibility) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

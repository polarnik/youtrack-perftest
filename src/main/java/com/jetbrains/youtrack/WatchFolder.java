/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * &#x60;WatchFolder&#x60; is a common abstract ancestor for saved searches and tags.
 */
@Schema(description = "`WatchFolder` is a common abstract ancestor for saved searches and tags.")


public class WatchFolder extends IssueFolder {
    @SerializedName("id")
    private final String watchFolderId = null;

    @SerializedName("owner")
    private User owner = null;

    @SerializedName("visibleFor")
    private UserGroup visibleFor = null;

    @SerializedName("updateableBy")
    private UserGroup updateableBy = null;

    @SerializedName("readSharingSettings")
    private WatchFolderSharingSettings readSharingSettings = null;

    @SerializedName("updateSharingSettings")
    private WatchFolderSharingSettings updateSharingSettings = null;

    /**
     * Get watchFolderId
     *
     * @return watchFolderId
     **/
    @Schema(description = "")
    public String getWatchFolderId() {
        return watchFolderId;
    }

    public WatchFolder owner(User owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Get owner
     *
     * @return owner
     **/
    @Schema(description = "")
    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }

    public WatchFolder visibleFor(UserGroup visibleFor) {
        this.visibleFor = visibleFor;
        return this;
    }

    /**
     * Get visibleFor
     *
     * @return visibleFor
     **/
    @Schema(description = "")
    public UserGroup getVisibleFor() {
        return visibleFor;
    }

    public void setVisibleFor(UserGroup visibleFor) {
        this.visibleFor = visibleFor;
    }

    public WatchFolder updateableBy(UserGroup updateableBy) {
        this.updateableBy = updateableBy;
        return this;
    }

    /**
     * Get updateableBy
     *
     * @return updateableBy
     **/
    @Schema(description = "")
    public UserGroup getUpdateableBy() {
        return updateableBy;
    }

    public void setUpdateableBy(UserGroup updateableBy) {
        this.updateableBy = updateableBy;
    }

    public WatchFolder readSharingSettings(WatchFolderSharingSettings readSharingSettings) {
        this.readSharingSettings = readSharingSettings;
        return this;
    }

    /**
     * Get readSharingSettings
     *
     * @return readSharingSettings
     **/
    @Schema(description = "")
    public WatchFolderSharingSettings getReadSharingSettings() {
        return readSharingSettings;
    }

    public void setReadSharingSettings(WatchFolderSharingSettings readSharingSettings) {
        this.readSharingSettings = readSharingSettings;
    }

    public WatchFolder updateSharingSettings(WatchFolderSharingSettings updateSharingSettings) {
        this.updateSharingSettings = updateSharingSettings;
        return this;
    }

    /**
     * Get updateSharingSettings
     *
     * @return updateSharingSettings
     **/
    @Schema(description = "")
    public WatchFolderSharingSettings getUpdateSharingSettings() {
        return updateSharingSettings;
    }

    public void setUpdateSharingSettings(WatchFolderSharingSettings updateSharingSettings) {
        this.updateSharingSettings = updateSharingSettings;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WatchFolder watchFolder = (WatchFolder) o;
        return Objects.equals(this.watchFolderId, watchFolder.watchFolderId) &&
                Objects.equals(this.owner, watchFolder.owner) &&
                Objects.equals(this.visibleFor, watchFolder.visibleFor) &&
                Objects.equals(this.updateableBy, watchFolder.updateableBy) &&
                Objects.equals(this.readSharingSettings, watchFolder.readSharingSettings) &&
                Objects.equals(this.updateSharingSettings, watchFolder.updateSharingSettings) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(watchFolderId, owner, visibleFor, updateableBy, readSharingSettings, updateSharingSettings, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class WatchFolder {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    watchFolderId: " + toIndentedString(watchFolderId) + "\n" +
                "    owner: " + toIndentedString(owner) + "\n" +
                "    visibleFor: " + toIndentedString(visibleFor) + "\n" +
                "    updateableBy: " + toIndentedString(updateableBy) + "\n" +
                "    readSharingSettings: " + toIndentedString(readSharingSettings) + "\n" +
                "    updateSharingSettings: " + toIndentedString(updateSharingSettings) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * DatabaseBackupSettings
 */


public class DatabaseBackupSettings {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("location")
    private String location = null;

    @SerializedName("filesToKeep")
    private Integer filesToKeep = null;

    @SerializedName("cronExpression")
    private String cronExpression = null;
    @SerializedName("archiveFormat")
    private ArchiveFormatEnum archiveFormat = null;
    @SerializedName("isOn")
    private Boolean isOn = null;
    @SerializedName("availableDiskSpace")
    private final Long availableDiskSpace = null;
    @SerializedName("notifiedUsers")
    private List<User> notifiedUsers = null;
    @SerializedName("backupStatus")
    private BackupStatus backupStatus = null;
    @SerializedName("$type")
    private String $type = null;

    public DatabaseBackupSettings() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public DatabaseBackupSettings location(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get location
     *
     * @return location
     **/
    @Schema(description = "")
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public DatabaseBackupSettings filesToKeep(Integer filesToKeep) {
        this.filesToKeep = filesToKeep;
        return this;
    }

    /**
     * Get filesToKeep
     *
     * @return filesToKeep
     **/
    @Schema(description = "")
    public Integer getFilesToKeep() {
        return filesToKeep;
    }

    public void setFilesToKeep(Integer filesToKeep) {
        this.filesToKeep = filesToKeep;
    }

    public DatabaseBackupSettings cronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
        return this;
    }

    /**
     * Get cronExpression
     *
     * @return cronExpression
     **/
    @Schema(description = "")
    public String getCronExpression() {
        return cronExpression;
    }

    public void setCronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
    }

    public DatabaseBackupSettings archiveFormat(ArchiveFormatEnum archiveFormat) {
        this.archiveFormat = archiveFormat;
        return this;
    }

    /**
     * Get archiveFormat
     *
     * @return archiveFormat
     **/
    @Schema(description = "")
    public ArchiveFormatEnum getArchiveFormat() {
        return archiveFormat;
    }

    public void setArchiveFormat(ArchiveFormatEnum archiveFormat) {
        this.archiveFormat = archiveFormat;
    }

    public DatabaseBackupSettings isOn(Boolean isOn) {
        this.isOn = isOn;
        return this;
    }

    /**
     * Get isOn
     *
     * @return isOn
     **/
    @Schema(description = "")
    public Boolean isIsOn() {
        return isOn;
    }

    public void setIsOn(Boolean isOn) {
        this.isOn = isOn;
    }

    /**
     * Get availableDiskSpace
     *
     * @return availableDiskSpace
     **/
    @Schema(description = "")
    public Long getAvailableDiskSpace() {
        return availableDiskSpace;
    }

    public DatabaseBackupSettings notifiedUsers(List<User> notifiedUsers) {
        this.notifiedUsers = notifiedUsers;
        return this;
    }

    public DatabaseBackupSettings addNotifiedUsersItem(User notifiedUsersItem) {
        if (this.notifiedUsers == null) {
            this.notifiedUsers = new ArrayList<User>();
        }
        this.notifiedUsers.add(notifiedUsersItem);
        return this;
    }

    /**
     * Get notifiedUsers
     *
     * @return notifiedUsers
     **/
    @Schema(description = "")
    public List<User> getNotifiedUsers() {
        return notifiedUsers;
    }

    public void setNotifiedUsers(List<User> notifiedUsers) {
        this.notifiedUsers = notifiedUsers;
    }

    public DatabaseBackupSettings backupStatus(BackupStatus backupStatus) {
        this.backupStatus = backupStatus;
        return this;
    }

    /**
     * Get backupStatus
     *
     * @return backupStatus
     **/
    @Schema(description = "")
    public BackupStatus getBackupStatus() {
        return backupStatus;
    }

    public void setBackupStatus(BackupStatus backupStatus) {
        this.backupStatus = backupStatus;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DatabaseBackupSettings databaseBackupSettings = (DatabaseBackupSettings) o;
        return Objects.equals(this.id, databaseBackupSettings.id) &&
                Objects.equals(this.location, databaseBackupSettings.location) &&
                Objects.equals(this.filesToKeep, databaseBackupSettings.filesToKeep) &&
                Objects.equals(this.cronExpression, databaseBackupSettings.cronExpression) &&
                Objects.equals(this.archiveFormat, databaseBackupSettings.archiveFormat) &&
                Objects.equals(this.isOn, databaseBackupSettings.isOn) &&
                Objects.equals(this.availableDiskSpace, databaseBackupSettings.availableDiskSpace) &&
                Objects.equals(this.notifiedUsers, databaseBackupSettings.notifiedUsers) &&
                Objects.equals(this.backupStatus, databaseBackupSettings.backupStatus) &&
                Objects.equals(this.$type, databaseBackupSettings.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, location, filesToKeep, cronExpression, archiveFormat, isOn, availableDiskSpace, notifiedUsers, backupStatus, $type);
    }

    @Override
    public String toString() {

        String sb = "class DatabaseBackupSettings {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    location: " + toIndentedString(location) + "\n" +
                "    filesToKeep: " + toIndentedString(filesToKeep) + "\n" +
                "    cronExpression: " + toIndentedString(cronExpression) + "\n" +
                "    archiveFormat: " + toIndentedString(archiveFormat) + "\n" +
                "    isOn: " + toIndentedString(isOn) + "\n" +
                "    availableDiskSpace: " + toIndentedString(availableDiskSpace) + "\n" +
                "    notifiedUsers: " + toIndentedString(notifiedUsers) + "\n" +
                "    backupStatus: " + toIndentedString(backupStatus) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets archiveFormat
     */
    @JsonAdapter(ArchiveFormatEnum.Adapter.class)
    public enum ArchiveFormatEnum {
        @SerializedName("TAR_GZ")
        TAR_GZ("TAR_GZ"),
        @SerializedName("ZIP")
        ZIP("ZIP");

        private final String value;

        ArchiveFormatEnum(String value) {
            this.value = value;
        }

        public static ArchiveFormatEnum fromValue(String input) {
            for (ArchiveFormatEnum b : ArchiveFormatEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ArchiveFormatEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ArchiveFormatEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public ArchiveFormatEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ArchiveFormatEnum.fromValue((String) (value));
            }
        }
    }

}

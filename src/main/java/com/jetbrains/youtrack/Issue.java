/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Issue
 */


public class Issue {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("attachments")
    private List<IssueAttachment> attachments = null;

    @SerializedName("comments")
    private List<IssueComment> comments = null;

    @SerializedName("commentsCount")
    private final Integer commentsCount = null;

    @SerializedName("created")
    private final Long created = null;

    @SerializedName("customFields")
    private final List<IssueCustomField> customFields = null;

    @SerializedName("fields")
    private final List<IssueCustomField> fields = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("draftOwner")
    private User draftOwner = null;

    @SerializedName("externalIssue")
    private ExternalIssue externalIssue = null;

    @SerializedName("idReadable")
    private final String idReadable = null;

    @SerializedName("isDraft")
    private final Boolean isDraft = null;

    @SerializedName("links")
    private final List<IssueLink> links = null;

    @SerializedName("numberInProject")
    private final Long numberInProject = null;

    @SerializedName("parent")
    private IssueLink parent = null;

    @SerializedName("pinnedComments")
    private final List<IssueComment> pinnedComments = null;

    @SerializedName("project")
    private Project project = null;

    @SerializedName("reporter")
    private User reporter = null;

    @SerializedName("resolved")
    private final Long resolved = null;

    @SerializedName("subtasks")
    private IssueLink subtasks = null;

    @SerializedName("summary")
    private String summary = null;

    @SerializedName("tags")
    private List<Tag> tags = null;

    @SerializedName("updated")
    private final Long updated = null;

    @SerializedName("updater")
    private User updater = null;

    @SerializedName("visibility")
    private Visibility visibility = null;

    @SerializedName("voters")
    private IssueVoters voters = null;

    @SerializedName("votes")
    private final Integer votes = null;

    @SerializedName("watchers")
    private IssueWatchers watchers = null;

    @SerializedName("wikifiedDescription")
    private final String wikifiedDescription = null;

    @SerializedName("$type")
    private String $type = null;

    public Issue() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public Issue attachments(List<IssueAttachment> attachments) {
        this.attachments = attachments;
        return this;
    }

    public Issue addAttachmentsItem(IssueAttachment attachmentsItem) {
        if (this.attachments == null) {
            this.attachments = new ArrayList<IssueAttachment>();
        }
        this.attachments.add(attachmentsItem);
        return this;
    }

    /**
     * Get attachments
     *
     * @return attachments
     **/
    @Schema(description = "")
    public List<IssueAttachment> getAttachments() {
        return attachments;
    }

    public void setAttachments(List<IssueAttachment> attachments) {
        this.attachments = attachments;
    }

    public Issue comments(List<IssueComment> comments) {
        this.comments = comments;
        return this;
    }

    public Issue addCommentsItem(IssueComment commentsItem) {
        if (this.comments == null) {
            this.comments = new ArrayList<IssueComment>();
        }
        this.comments.add(commentsItem);
        return this;
    }

    /**
     * Get comments
     *
     * @return comments
     **/
    @Schema(description = "")
    public List<IssueComment> getComments() {
        return comments;
    }

    public void setComments(List<IssueComment> comments) {
        this.comments = comments;
    }

    /**
     * Get commentsCount
     *
     * @return commentsCount
     **/
    @Schema(description = "")
    public Integer getCommentsCount() {
        return commentsCount;
    }

    /**
     * Get created
     *
     * @return created
     **/
    @Schema(description = "")
    public Long getCreated() {
        return created;
    }

    /**
     * Get customFields
     *
     * @return customFields
     **/
    @Schema(description = "")
    public List<IssueCustomField> getCustomFields() {
        return customFields;
    }
    @Schema(description = "")
    public List<IssueCustomField> getFields() {
        return fields;
    }
    public Issue description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     **/
    @Schema(description = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Issue draftOwner(User draftOwner) {
        this.draftOwner = draftOwner;
        return this;
    }

    /**
     * Get draftOwner
     *
     * @return draftOwner
     **/
    @Schema(description = "")
    public User getDraftOwner() {
        return draftOwner;
    }

    public void setDraftOwner(User draftOwner) {
        this.draftOwner = draftOwner;
    }

    public Issue externalIssue(ExternalIssue externalIssue) {
        this.externalIssue = externalIssue;
        return this;
    }

    /**
     * Get externalIssue
     *
     * @return externalIssue
     **/
    @Schema(description = "")
    public ExternalIssue getExternalIssue() {
        return externalIssue;
    }

    public void setExternalIssue(ExternalIssue externalIssue) {
        this.externalIssue = externalIssue;
    }

    /**
     * Get idReadable
     *
     * @return idReadable
     **/
    @Schema(description = "")
    public String getIdReadable() {
        return idReadable;
    }

    /**
     * Get isDraft
     *
     * @return isDraft
     **/
    @Schema(description = "")
    public Boolean isIsDraft() {
        return isDraft;
    }

    /**
     * Get links
     *
     * @return links
     **/
    @Schema(description = "")
    public List<IssueLink> getLinks() {
        return links;
    }

    /**
     * Get numberInProject
     *
     * @return numberInProject
     **/
    @Schema(description = "")
    public Long getNumberInProject() {
        return numberInProject;
    }

    public Issue parent(IssueLink parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Get parent
     *
     * @return parent
     **/
    @Schema(description = "")
    public IssueLink getParent() {
        return parent;
    }

    public void setParent(IssueLink parent) {
        this.parent = parent;
    }

    /**
     * Get pinnedComments
     *
     * @return pinnedComments
     **/
    @Schema(description = "")
    public List<IssueComment> getPinnedComments() {
        return pinnedComments;
    }

    public Issue project(Project project) {
        this.project = project;
        return this;
    }

    /**
     * Get project
     *
     * @return project
     **/
    @Schema(description = "")
    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public Issue reporter(User reporter) {
        this.reporter = reporter;
        return this;
    }

    /**
     * Get reporter
     *
     * @return reporter
     **/
    @Schema(description = "")
    public User getReporter() {
        return reporter;
    }

    public void setReporter(User reporter) {
        this.reporter = reporter;
    }

    /**
     * Get resolved
     *
     * @return resolved
     **/
    @Schema(description = "")
    public Long getResolved() {
        return resolved;
    }

    public Issue subtasks(IssueLink subtasks) {
        this.subtasks = subtasks;
        return this;
    }

    /**
     * Get subtasks
     *
     * @return subtasks
     **/
    @Schema(description = "")
    public IssueLink getSubtasks() {
        return subtasks;
    }

    public void setSubtasks(IssueLink subtasks) {
        this.subtasks = subtasks;
    }

    public Issue summary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get summary
     *
     * @return summary
     **/
    @Schema(description = "")
    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public Issue tags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }

    public Issue addTagsItem(Tag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<Tag>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * Get tags
     *
     * @return tags
     **/
    @Schema(description = "")
    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    /**
     * Get updated
     *
     * @return updated
     **/
    @Schema(description = "")
    public Long getUpdated() {
        return updated;
    }

    public Issue updater(User updater) {
        this.updater = updater;
        return this;
    }

    /**
     * Get updater
     *
     * @return updater
     **/
    @Schema(description = "")
    public User getUpdater() {
        return updater;
    }

    public void setUpdater(User updater) {
        this.updater = updater;
    }

    public Issue visibility(Visibility visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get visibility
     *
     * @return visibility
     **/
    @Schema(description = "")
    public Visibility getVisibility() {
        return visibility;
    }

    public void setVisibility(Visibility visibility) {
        this.visibility = visibility;
    }

    public Issue voters(IssueVoters voters) {
        this.voters = voters;
        return this;
    }

    /**
     * Get voters
     *
     * @return voters
     **/
    @Schema(description = "")
    public IssueVoters getVoters() {
        return voters;
    }

    public void setVoters(IssueVoters voters) {
        this.voters = voters;
    }

    /**
     * Get votes
     *
     * @return votes
     **/
    @Schema(description = "")
    public Integer getVotes() {
        return votes;
    }

    public Issue watchers(IssueWatchers watchers) {
        this.watchers = watchers;
        return this;
    }

    /**
     * Get watchers
     *
     * @return watchers
     **/
    @Schema(description = "")
    public IssueWatchers getWatchers() {
        return watchers;
    }

    public void setWatchers(IssueWatchers watchers) {
        this.watchers = watchers;
    }

    /**
     * Get wikifiedDescription
     *
     * @return wikifiedDescription
     **/
    @Schema(description = "")
    public String getWikifiedDescription() {
        return wikifiedDescription;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Issue issue = (Issue) o;
        return Objects.equals(this.id, issue.id) &&
                Objects.equals(this.attachments, issue.attachments) &&
                Objects.equals(this.comments, issue.comments) &&
                Objects.equals(this.commentsCount, issue.commentsCount) &&
                Objects.equals(this.created, issue.created) &&
                Objects.equals(this.customFields, issue.customFields) &&
                Objects.equals(this.fields, issue.fields) &&
                Objects.equals(this.description, issue.description) &&
                Objects.equals(this.draftOwner, issue.draftOwner) &&
                Objects.equals(this.externalIssue, issue.externalIssue) &&
                Objects.equals(this.idReadable, issue.idReadable) &&
                Objects.equals(this.isDraft, issue.isDraft) &&
                Objects.equals(this.links, issue.links) &&
                Objects.equals(this.numberInProject, issue.numberInProject) &&
                Objects.equals(this.parent, issue.parent) &&
                Objects.equals(this.pinnedComments, issue.pinnedComments) &&
                Objects.equals(this.project, issue.project) &&
                Objects.equals(this.reporter, issue.reporter) &&
                Objects.equals(this.resolved, issue.resolved) &&
                Objects.equals(this.subtasks, issue.subtasks) &&
                Objects.equals(this.summary, issue.summary) &&
                Objects.equals(this.tags, issue.tags) &&
                Objects.equals(this.updated, issue.updated) &&
                Objects.equals(this.updater, issue.updater) &&
                Objects.equals(this.visibility, issue.visibility) &&
                Objects.equals(this.voters, issue.voters) &&
                Objects.equals(this.votes, issue.votes) &&
                Objects.equals(this.watchers, issue.watchers) &&
                Objects.equals(this.wikifiedDescription, issue.wikifiedDescription) &&
                Objects.equals(this.$type, issue.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, attachments, comments, commentsCount, created, customFields, description, draftOwner, externalIssue, idReadable, isDraft, links, numberInProject, parent, pinnedComments, project, reporter, resolved, subtasks, summary, tags, updated, updater, visibility, voters, votes, watchers, wikifiedDescription, $type);
    }


    @Override
    public String toString() {

        String sb = "class Issue {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    attachments: " + toIndentedString(attachments) + "\n" +
                "    comments: " + toIndentedString(comments) + "\n" +
                "    commentsCount: " + toIndentedString(commentsCount) + "\n" +
                "    created: " + toIndentedString(created) + "\n" +
                "    customFields: " + toIndentedString(customFields) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    draftOwner: " + toIndentedString(draftOwner) + "\n" +
                "    externalIssue: " + toIndentedString(externalIssue) + "\n" +
                "    idReadable: " + toIndentedString(idReadable) + "\n" +
                "    isDraft: " + toIndentedString(isDraft) + "\n" +
                "    links: " + toIndentedString(links) + "\n" +
                "    numberInProject: " + toIndentedString(numberInProject) + "\n" +
                "    parent: " + toIndentedString(parent) + "\n" +
                "    pinnedComments: " + toIndentedString(pinnedComments) + "\n" +
                "    project: " + toIndentedString(project) + "\n" +
                "    reporter: " + toIndentedString(reporter) + "\n" +
                "    resolved: " + toIndentedString(resolved) + "\n" +
                "    subtasks: " + toIndentedString(subtasks) + "\n" +
                "    summary: " + toIndentedString(summary) + "\n" +
                "    tags: " + toIndentedString(tags) + "\n" +
                "    updated: " + toIndentedString(updated) + "\n" +
                "    updater: " + toIndentedString(updater) + "\n" +
                "    visibility: " + toIndentedString(visibility) + "\n" +
                "    voters: " + toIndentedString(voters) + "\n" +
                "    votes: " + toIndentedString(votes) + "\n" +
                "    watchers: " + toIndentedString(watchers) + "\n" +
                "    wikifiedDescription: " + toIndentedString(wikifiedDescription) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Tag
 */


public class Tag extends WatchFolder {
    @SerializedName("id")
    private final String tagId = null;

    @SerializedName("issues")
    private List<Issue> issues = null;

    @SerializedName("color")
    private FieldStyle color = null;

    @SerializedName("untagOnResolve")
    private Boolean untagOnResolve = null;

    @SerializedName("visibleFor")
    private UserGroup tagVisibleFor = null;

    @SerializedName("updateableBy")
    private UserGroup tagUpdateableBy = null;

    @SerializedName("readSharingSettings")
    private WatchFolderSharingSettings tagReadSharingSettings = null;

    @SerializedName("tagSharingSettings")
    private TagSharingSettings tagSharingSettings = null;

    @SerializedName("updateSharingSettings")
    private WatchFolderSharingSettings tagUpdateSharingSettings = null;

    /**
     * Get tagId
     *
     * @return tagId
     **/
    @Schema(description = "")
    public String getTagId() {
        return tagId;
    }

    public Tag issues(List<Issue> issues) {
        this.issues = issues;
        return this;
    }

    public Tag addIssuesItem(Issue issuesItem) {
        if (this.issues == null) {
            this.issues = new ArrayList<Issue>();
        }
        this.issues.add(issuesItem);
        return this;
    }

    /**
     * Get issues
     *
     * @return issues
     **/
    @Schema(description = "")
    public List<Issue> getIssues() {
        return issues;
    }

    public void setIssues(List<Issue> issues) {
        this.issues = issues;
    }

    public Tag color(FieldStyle color) {
        this.color = color;
        return this;
    }

    /**
     * Get color
     *
     * @return color
     **/
    @Schema(description = "")
    public FieldStyle getColor() {
        return color;
    }

    public void setColor(FieldStyle color) {
        this.color = color;
    }

    public Tag untagOnResolve(Boolean untagOnResolve) {
        this.untagOnResolve = untagOnResolve;
        return this;
    }

    /**
     * Get untagOnResolve
     *
     * @return untagOnResolve
     **/
    @Schema(description = "")
    public Boolean isUntagOnResolve() {
        return untagOnResolve;
    }

    public void setUntagOnResolve(Boolean untagOnResolve) {
        this.untagOnResolve = untagOnResolve;
    }

    public Tag tagVisibleFor(UserGroup tagVisibleFor) {
        this.tagVisibleFor = tagVisibleFor;
        return this;
    }

    /**
     * Get tagVisibleFor
     *
     * @return tagVisibleFor
     **/
    @Schema(description = "")
    public UserGroup getTagVisibleFor() {
        return tagVisibleFor;
    }

    public void setTagVisibleFor(UserGroup tagVisibleFor) {
        this.tagVisibleFor = tagVisibleFor;
    }

    public Tag tagUpdateableBy(UserGroup tagUpdateableBy) {
        this.tagUpdateableBy = tagUpdateableBy;
        return this;
    }

    /**
     * Get tagUpdateableBy
     *
     * @return tagUpdateableBy
     **/
    @Schema(description = "")
    public UserGroup getTagUpdateableBy() {
        return tagUpdateableBy;
    }

    public void setTagUpdateableBy(UserGroup tagUpdateableBy) {
        this.tagUpdateableBy = tagUpdateableBy;
    }

    public Tag tagReadSharingSettings(WatchFolderSharingSettings tagReadSharingSettings) {
        this.tagReadSharingSettings = tagReadSharingSettings;
        return this;
    }

    /**
     * Get tagReadSharingSettings
     *
     * @return tagReadSharingSettings
     **/
    @Schema(description = "")
    public WatchFolderSharingSettings getTagReadSharingSettings() {
        return tagReadSharingSettings;
    }

    public void setTagReadSharingSettings(WatchFolderSharingSettings tagReadSharingSettings) {
        this.tagReadSharingSettings = tagReadSharingSettings;
    }

    public Tag tagSharingSettings(TagSharingSettings tagSharingSettings) {
        this.tagSharingSettings = tagSharingSettings;
        return this;
    }

    /**
     * Get tagSharingSettings
     *
     * @return tagSharingSettings
     **/
    @Schema(description = "")
    public TagSharingSettings getTagSharingSettings() {
        return tagSharingSettings;
    }

    public void setTagSharingSettings(TagSharingSettings tagSharingSettings) {
        this.tagSharingSettings = tagSharingSettings;
    }

    public Tag tagUpdateSharingSettings(WatchFolderSharingSettings tagUpdateSharingSettings) {
        this.tagUpdateSharingSettings = tagUpdateSharingSettings;
        return this;
    }

    /**
     * Get tagUpdateSharingSettings
     *
     * @return tagUpdateSharingSettings
     **/
    @Schema(description = "")
    public WatchFolderSharingSettings getTagUpdateSharingSettings() {
        return tagUpdateSharingSettings;
    }

    public void setTagUpdateSharingSettings(WatchFolderSharingSettings tagUpdateSharingSettings) {
        this.tagUpdateSharingSettings = tagUpdateSharingSettings;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tag tag = (Tag) o;
        return Objects.equals(this.tagId, tag.tagId) &&
                Objects.equals(this.issues, tag.issues) &&
                Objects.equals(this.color, tag.color) &&
                Objects.equals(this.untagOnResolve, tag.untagOnResolve) &&
                Objects.equals(this.tagVisibleFor, tag.tagVisibleFor) &&
                Objects.equals(this.tagUpdateableBy, tag.tagUpdateableBy) &&
                Objects.equals(this.tagReadSharingSettings, tag.tagReadSharingSettings) &&
                Objects.equals(this.tagSharingSettings, tag.tagSharingSettings) &&
                Objects.equals(this.tagUpdateSharingSettings, tag.tagUpdateSharingSettings) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tagId, issues, color, untagOnResolve, tagVisibleFor, tagUpdateableBy, tagReadSharingSettings, tagSharingSettings, tagUpdateSharingSettings, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class Tag {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    tagId: " + toIndentedString(tagId) + "\n" +
                "    issues: " + toIndentedString(issues) + "\n" +
                "    color: " + toIndentedString(color) + "\n" +
                "    untagOnResolve: " + toIndentedString(untagOnResolve) + "\n" +
                "    tagVisibleFor: " + toIndentedString(tagVisibleFor) + "\n" +
                "    tagUpdateableBy: " + toIndentedString(tagUpdateableBy) + "\n" +
                "    tagReadSharingSettings: " + toIndentedString(tagReadSharingSettings) + "\n" +
                "    tagSharingSettings: " + toIndentedString(tagSharingSettings) + "\n" +
                "    tagUpdateSharingSettings: " + toIndentedString(tagUpdateSharingSettings) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

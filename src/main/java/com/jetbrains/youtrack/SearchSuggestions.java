/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * SearchSuggestions
 */


public class SearchSuggestions {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("caret")
    private Integer caret = null;

    @SerializedName("ignoreUnresolvedSetting")
    private Boolean ignoreUnresolvedSetting = null;

    @SerializedName("query")
    private String query = null;

    @SerializedName("suggestions")
    private final List<Suggestion> suggestions = null;

    @SerializedName("folders")
    private List<IssueFolder> folders = null;

    @SerializedName("$type")
    private String $type = null;

    public SearchSuggestions() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public SearchSuggestions caret(Integer caret) {
        this.caret = caret;
        return this;
    }

    /**
     * Get caret
     *
     * @return caret
     **/
    @Schema(description = "")
    public Integer getCaret() {
        return caret;
    }

    public void setCaret(Integer caret) {
        this.caret = caret;
    }

    public SearchSuggestions ignoreUnresolvedSetting(Boolean ignoreUnresolvedSetting) {
        this.ignoreUnresolvedSetting = ignoreUnresolvedSetting;
        return this;
    }

    /**
     * Get ignoreUnresolvedSetting
     *
     * @return ignoreUnresolvedSetting
     **/
    @Schema(description = "")
    public Boolean isIgnoreUnresolvedSetting() {
        return ignoreUnresolvedSetting;
    }

    public void setIgnoreUnresolvedSetting(Boolean ignoreUnresolvedSetting) {
        this.ignoreUnresolvedSetting = ignoreUnresolvedSetting;
    }

    public SearchSuggestions query(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get query
     *
     * @return query
     **/
    @Schema(description = "")
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    /**
     * Get suggestions
     *
     * @return suggestions
     **/
    @Schema(description = "")
    public List<Suggestion> getSuggestions() {
        return suggestions;
    }

    public SearchSuggestions folders(List<IssueFolder> folders) {
        this.folders = folders;
        return this;
    }

    public SearchSuggestions addFoldersItem(IssueFolder foldersItem) {
        if (this.folders == null) {
            this.folders = new ArrayList<IssueFolder>();
        }
        this.folders.add(foldersItem);
        return this;
    }

    /**
     * Get folders
     *
     * @return folders
     **/
    @Schema(description = "")
    public List<IssueFolder> getFolders() {
        return folders;
    }

    public void setFolders(List<IssueFolder> folders) {
        this.folders = folders;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchSuggestions searchSuggestions = (SearchSuggestions) o;
        return Objects.equals(this.id, searchSuggestions.id) &&
                Objects.equals(this.caret, searchSuggestions.caret) &&
                Objects.equals(this.ignoreUnresolvedSetting, searchSuggestions.ignoreUnresolvedSetting) &&
                Objects.equals(this.query, searchSuggestions.query) &&
                Objects.equals(this.suggestions, searchSuggestions.suggestions) &&
                Objects.equals(this.folders, searchSuggestions.folders) &&
                Objects.equals(this.$type, searchSuggestions.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, caret, ignoreUnresolvedSetting, query, suggestions, folders, $type);
    }


    @Override
    public String toString() {

        String sb = "class SearchSuggestions {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    caret: " + toIndentedString(caret) + "\n" +
                "    ignoreUnresolvedSetting: " + toIndentedString(ignoreUnresolvedSetting) + "\n" +
                "    query: " + toIndentedString(query) + "\n" +
                "    suggestions: " + toIndentedString(suggestions) + "\n" +
                "    folders: " + toIndentedString(folders) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

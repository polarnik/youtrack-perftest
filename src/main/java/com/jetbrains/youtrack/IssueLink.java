/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * IssueLink
 */


public class IssueLink {
    @SerializedName("id")
    private final String id = null;
    @SerializedName("direction")
    private final DirectionEnum direction = null;
    @SerializedName("linkType")
    private IssueLinkType linkType = null;
    @SerializedName("issues")
    private List<Issue> issues = null;
    @SerializedName("trimmedIssues")
    private final List<Issue> trimmedIssues = null;
    @SerializedName("$type")
    private String $type = null;

    public IssueLink() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    /**
     * Get direction
     *
     * @return direction
     **/
    @Schema(description = "")
    public DirectionEnum getDirection() {
        return direction;
    }

    public IssueLink linkType(IssueLinkType linkType) {
        this.linkType = linkType;
        return this;
    }

    /**
     * Get linkType
     *
     * @return linkType
     **/
    @Schema(description = "")
    public IssueLinkType getLinkType() {
        return linkType;
    }

    public void setLinkType(IssueLinkType linkType) {
        this.linkType = linkType;
    }

    public IssueLink issues(List<Issue> issues) {
        this.issues = issues;
        return this;
    }

    public IssueLink addIssuesItem(Issue issuesItem) {
        if (this.issues == null) {
            this.issues = new ArrayList<Issue>();
        }
        this.issues.add(issuesItem);
        return this;
    }

    /**
     * Get issues
     *
     * @return issues
     **/
    @Schema(description = "")
    public List<Issue> getIssues() {
        return issues;
    }

    public void setIssues(List<Issue> issues) {
        this.issues = issues;
    }

    /**
     * Get trimmedIssues
     *
     * @return trimmedIssues
     **/
    @Schema(description = "")
    public List<Issue> getTrimmedIssues() {
        return trimmedIssues;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IssueLink issueLink = (IssueLink) o;
        return Objects.equals(this.id, issueLink.id) &&
                Objects.equals(this.direction, issueLink.direction) &&
                Objects.equals(this.linkType, issueLink.linkType) &&
                Objects.equals(this.issues, issueLink.issues) &&
                Objects.equals(this.trimmedIssues, issueLink.trimmedIssues) &&
                Objects.equals(this.$type, issueLink.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, direction, linkType, issues, trimmedIssues, $type);
    }

    @Override
    public String toString() {

        String sb = "class IssueLink {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    direction: " + toIndentedString(direction) + "\n" +
                "    linkType: " + toIndentedString(linkType) + "\n" +
                "    issues: " + toIndentedString(issues) + "\n" +
                "    trimmedIssues: " + toIndentedString(trimmedIssues) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets direction
     */
    @JsonAdapter(DirectionEnum.Adapter.class)
    public enum DirectionEnum {
        @SerializedName("OUTWARD")
        OUTWARD("OUTWARD"),
        @SerializedName("INWARD")
        INWARD("INWARD"),
        @SerializedName("BOTH")
        BOTH("BOTH");

        private final String value;

        DirectionEnum(String value) {
            this.value = value;
        }

        public static DirectionEnum fromValue(String input) {
            for (DirectionEnum b : DirectionEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<DirectionEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public DirectionEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return DirectionEnum.fromValue((String) (value));
            }
        }
    }

}

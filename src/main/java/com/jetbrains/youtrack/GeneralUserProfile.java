/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * GeneralUserProfile
 */


public class GeneralUserProfile {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("dateFieldFormat")
    private DateFormatDescriptor dateFieldFormat = null;

    @SerializedName("timezone")
    private TimeZoneDescriptor timezone = null;

    @SerializedName("locale")
    private LocaleDescriptor locale = null;

    @SerializedName("$type")
    private String $type = null;

    public GeneralUserProfile() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public GeneralUserProfile dateFieldFormat(DateFormatDescriptor dateFieldFormat) {
        this.dateFieldFormat = dateFieldFormat;
        return this;
    }

    /**
     * Get dateFieldFormat
     *
     * @return dateFieldFormat
     **/
    @Schema(description = "")
    public DateFormatDescriptor getDateFieldFormat() {
        return dateFieldFormat;
    }

    public void setDateFieldFormat(DateFormatDescriptor dateFieldFormat) {
        this.dateFieldFormat = dateFieldFormat;
    }

    public GeneralUserProfile timezone(TimeZoneDescriptor timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get timezone
     *
     * @return timezone
     **/
    @Schema(description = "")
    public TimeZoneDescriptor getTimezone() {
        return timezone;
    }

    public void setTimezone(TimeZoneDescriptor timezone) {
        this.timezone = timezone;
    }

    public GeneralUserProfile locale(LocaleDescriptor locale) {
        this.locale = locale;
        return this;
    }

    /**
     * Get locale
     *
     * @return locale
     **/
    @Schema(description = "")
    public LocaleDescriptor getLocale() {
        return locale;
    }

    public void setLocale(LocaleDescriptor locale) {
        this.locale = locale;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneralUserProfile generalUserProfile = (GeneralUserProfile) o;
        return Objects.equals(this.id, generalUserProfile.id) &&
                Objects.equals(this.dateFieldFormat, generalUserProfile.dateFieldFormat) &&
                Objects.equals(this.timezone, generalUserProfile.timezone) &&
                Objects.equals(this.locale, generalUserProfile.locale) &&
                Objects.equals(this.$type, generalUserProfile.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, dateFieldFormat, timezone, locale, $type);
    }


    @Override
    public String toString() {

        String sb = "class GeneralUserProfile {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    dateFieldFormat: " + toIndentedString(dateFieldFormat) + "\n" +
                "    timezone: " + toIndentedString(timezone) + "\n" +
                "    locale: " + toIndentedString(locale) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

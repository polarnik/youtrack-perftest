/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * Telemetry
 */


public class Telemetry {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("installationFolder")
    private final String installationFolder = null;

    @SerializedName("databaseLocation")
    private final String databaseLocation = null;

    @SerializedName("logsLocation")
    private final String logsLocation = null;

    @SerializedName("availableProcessors")
    private final Integer availableProcessors = null;

    @SerializedName("availableMemory")
    private final String availableMemory = null;

    @SerializedName("allocatedMemory")
    private final String allocatedMemory = null;

    @SerializedName("usedMemory")
    private final String usedMemory = null;

    @SerializedName("uptime")
    private final String uptime = null;

    @SerializedName("startedTime")
    private final Long startedTime = null;

    @SerializedName("databaseBackgroundThreads")
    private final Integer databaseBackgroundThreads = null;

    @SerializedName("pendingAsyncJobs")
    private final Integer pendingAsyncJobs = null;

    @SerializedName("cachedResultsCountInDBQueriesCache")
    private final Integer cachedResultsCountInDBQueriesCache = null;

    @SerializedName("databaseQueriesCacheHitRate")
    private final String databaseQueriesCacheHitRate = null;

    @SerializedName("blobStringsCacheHitRate")
    private final String blobStringsCacheHitRate = null;

    @SerializedName("totalTransactions")
    private final Long totalTransactions = null;

    @SerializedName("transactionsPerSecond")
    private final String transactionsPerSecond = null;

    @SerializedName("requestsPerSecond")
    private final String requestsPerSecond = null;

    @SerializedName("databaseSize")
    private final String databaseSize = null;

    @SerializedName("fullDatabaseSize")
    private final String fullDatabaseSize = null;

    @SerializedName("textIndexSize")
    private final String textIndexSize = null;

    @SerializedName("onlineUsers")
    private OnlineUsers onlineUsers = null;

    @SerializedName("reportCalculatorThreads")
    private final Integer reportCalculatorThreads = null;

    @SerializedName("notificationAnalyzerThreads")
    private final Integer notificationAnalyzerThreads = null;

    @SerializedName("$type")
    private String $type = null;

    public Telemetry() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    /**
     * Get installationFolder
     *
     * @return installationFolder
     **/
    @Schema(description = "")
    public String getInstallationFolder() {
        return installationFolder;
    }

    /**
     * Get databaseLocation
     *
     * @return databaseLocation
     **/
    @Schema(description = "")
    public String getDatabaseLocation() {
        return databaseLocation;
    }

    /**
     * Get logsLocation
     *
     * @return logsLocation
     **/
    @Schema(description = "")
    public String getLogsLocation() {
        return logsLocation;
    }

    /**
     * Get availableProcessors
     *
     * @return availableProcessors
     **/
    @Schema(description = "")
    public Integer getAvailableProcessors() {
        return availableProcessors;
    }

    /**
     * Get availableMemory
     *
     * @return availableMemory
     **/
    @Schema(description = "")
    public String getAvailableMemory() {
        return availableMemory;
    }

    /**
     * Get allocatedMemory
     *
     * @return allocatedMemory
     **/
    @Schema(description = "")
    public String getAllocatedMemory() {
        return allocatedMemory;
    }

    /**
     * Get usedMemory
     *
     * @return usedMemory
     **/
    @Schema(description = "")
    public String getUsedMemory() {
        return usedMemory;
    }

    /**
     * Get uptime
     *
     * @return uptime
     **/
    @Schema(description = "")
    public String getUptime() {
        return uptime;
    }

    /**
     * Get startedTime
     *
     * @return startedTime
     **/
    @Schema(description = "")
    public Long getStartedTime() {
        return startedTime;
    }

    /**
     * Get databaseBackgroundThreads
     *
     * @return databaseBackgroundThreads
     **/
    @Schema(description = "")
    public Integer getDatabaseBackgroundThreads() {
        return databaseBackgroundThreads;
    }

    /**
     * Get pendingAsyncJobs
     *
     * @return pendingAsyncJobs
     **/
    @Schema(description = "")
    public Integer getPendingAsyncJobs() {
        return pendingAsyncJobs;
    }

    /**
     * Get cachedResultsCountInDBQueriesCache
     *
     * @return cachedResultsCountInDBQueriesCache
     **/
    @Schema(description = "")
    public Integer getCachedResultsCountInDBQueriesCache() {
        return cachedResultsCountInDBQueriesCache;
    }

    /**
     * Get databaseQueriesCacheHitRate
     *
     * @return databaseQueriesCacheHitRate
     **/
    @Schema(description = "")
    public String getDatabaseQueriesCacheHitRate() {
        return databaseQueriesCacheHitRate;
    }

    /**
     * Get blobStringsCacheHitRate
     *
     * @return blobStringsCacheHitRate
     **/
    @Schema(description = "")
    public String getBlobStringsCacheHitRate() {
        return blobStringsCacheHitRate;
    }

    /**
     * Get totalTransactions
     *
     * @return totalTransactions
     **/
    @Schema(description = "")
    public Long getTotalTransactions() {
        return totalTransactions;
    }

    /**
     * Get transactionsPerSecond
     *
     * @return transactionsPerSecond
     **/
    @Schema(description = "")
    public String getTransactionsPerSecond() {
        return transactionsPerSecond;
    }

    /**
     * Get requestsPerSecond
     *
     * @return requestsPerSecond
     **/
    @Schema(description = "")
    public String getRequestsPerSecond() {
        return requestsPerSecond;
    }

    /**
     * Get databaseSize
     *
     * @return databaseSize
     **/
    @Schema(description = "")
    public String getDatabaseSize() {
        return databaseSize;
    }

    /**
     * Get fullDatabaseSize
     *
     * @return fullDatabaseSize
     **/
    @Schema(description = "")
    public String getFullDatabaseSize() {
        return fullDatabaseSize;
    }

    /**
     * Get textIndexSize
     *
     * @return textIndexSize
     **/
    @Schema(description = "")
    public String getTextIndexSize() {
        return textIndexSize;
    }

    public Telemetry onlineUsers(OnlineUsers onlineUsers) {
        this.onlineUsers = onlineUsers;
        return this;
    }

    /**
     * Get onlineUsers
     *
     * @return onlineUsers
     **/
    @Schema(description = "")
    public OnlineUsers getOnlineUsers() {
        return onlineUsers;
    }

    public void setOnlineUsers(OnlineUsers onlineUsers) {
        this.onlineUsers = onlineUsers;
    }

    /**
     * Get reportCalculatorThreads
     *
     * @return reportCalculatorThreads
     **/
    @Schema(description = "")
    public Integer getReportCalculatorThreads() {
        return reportCalculatorThreads;
    }

    /**
     * Get notificationAnalyzerThreads
     *
     * @return notificationAnalyzerThreads
     **/
    @Schema(description = "")
    public Integer getNotificationAnalyzerThreads() {
        return notificationAnalyzerThreads;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Telemetry telemetry = (Telemetry) o;
        return Objects.equals(this.id, telemetry.id) &&
                Objects.equals(this.installationFolder, telemetry.installationFolder) &&
                Objects.equals(this.databaseLocation, telemetry.databaseLocation) &&
                Objects.equals(this.logsLocation, telemetry.logsLocation) &&
                Objects.equals(this.availableProcessors, telemetry.availableProcessors) &&
                Objects.equals(this.availableMemory, telemetry.availableMemory) &&
                Objects.equals(this.allocatedMemory, telemetry.allocatedMemory) &&
                Objects.equals(this.usedMemory, telemetry.usedMemory) &&
                Objects.equals(this.uptime, telemetry.uptime) &&
                Objects.equals(this.startedTime, telemetry.startedTime) &&
                Objects.equals(this.databaseBackgroundThreads, telemetry.databaseBackgroundThreads) &&
                Objects.equals(this.pendingAsyncJobs, telemetry.pendingAsyncJobs) &&
                Objects.equals(this.cachedResultsCountInDBQueriesCache, telemetry.cachedResultsCountInDBQueriesCache) &&
                Objects.equals(this.databaseQueriesCacheHitRate, telemetry.databaseQueriesCacheHitRate) &&
                Objects.equals(this.blobStringsCacheHitRate, telemetry.blobStringsCacheHitRate) &&
                Objects.equals(this.totalTransactions, telemetry.totalTransactions) &&
                Objects.equals(this.transactionsPerSecond, telemetry.transactionsPerSecond) &&
                Objects.equals(this.requestsPerSecond, telemetry.requestsPerSecond) &&
                Objects.equals(this.databaseSize, telemetry.databaseSize) &&
                Objects.equals(this.fullDatabaseSize, telemetry.fullDatabaseSize) &&
                Objects.equals(this.textIndexSize, telemetry.textIndexSize) &&
                Objects.equals(this.onlineUsers, telemetry.onlineUsers) &&
                Objects.equals(this.reportCalculatorThreads, telemetry.reportCalculatorThreads) &&
                Objects.equals(this.notificationAnalyzerThreads, telemetry.notificationAnalyzerThreads) &&
                Objects.equals(this.$type, telemetry.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, installationFolder, databaseLocation, logsLocation, availableProcessors, availableMemory, allocatedMemory, usedMemory, uptime, startedTime, databaseBackgroundThreads, pendingAsyncJobs, cachedResultsCountInDBQueriesCache, databaseQueriesCacheHitRate, blobStringsCacheHitRate, totalTransactions, transactionsPerSecond, requestsPerSecond, databaseSize, fullDatabaseSize, textIndexSize, onlineUsers, reportCalculatorThreads, notificationAnalyzerThreads, $type);
    }


    @Override
    public String toString() {

        String sb = "class Telemetry {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    installationFolder: " + toIndentedString(installationFolder) + "\n" +
                "    databaseLocation: " + toIndentedString(databaseLocation) + "\n" +
                "    logsLocation: " + toIndentedString(logsLocation) + "\n" +
                "    availableProcessors: " + toIndentedString(availableProcessors) + "\n" +
                "    availableMemory: " + toIndentedString(availableMemory) + "\n" +
                "    allocatedMemory: " + toIndentedString(allocatedMemory) + "\n" +
                "    usedMemory: " + toIndentedString(usedMemory) + "\n" +
                "    uptime: " + toIndentedString(uptime) + "\n" +
                "    startedTime: " + toIndentedString(startedTime) + "\n" +
                "    databaseBackgroundThreads: " + toIndentedString(databaseBackgroundThreads) + "\n" +
                "    pendingAsyncJobs: " + toIndentedString(pendingAsyncJobs) + "\n" +
                "    cachedResultsCountInDBQueriesCache: " + toIndentedString(cachedResultsCountInDBQueriesCache) + "\n" +
                "    databaseQueriesCacheHitRate: " + toIndentedString(databaseQueriesCacheHitRate) + "\n" +
                "    blobStringsCacheHitRate: " + toIndentedString(blobStringsCacheHitRate) + "\n" +
                "    totalTransactions: " + toIndentedString(totalTransactions) + "\n" +
                "    transactionsPerSecond: " + toIndentedString(transactionsPerSecond) + "\n" +
                "    requestsPerSecond: " + toIndentedString(requestsPerSecond) + "\n" +
                "    databaseSize: " + toIndentedString(databaseSize) + "\n" +
                "    fullDatabaseSize: " + toIndentedString(fullDatabaseSize) + "\n" +
                "    textIndexSize: " + toIndentedString(textIndexSize) + "\n" +
                "    onlineUsers: " + toIndentedString(onlineUsers) + "\n" +
                "    reportCalculatorThreads: " + toIndentedString(reportCalculatorThreads) + "\n" +
                "    notificationAnalyzerThreads: " + toIndentedString(notificationAnalyzerThreads) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

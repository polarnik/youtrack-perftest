/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2024.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.youtrack;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CommandList
 */


public class CommandList {
    @SerializedName("id")
    private final String id = null;

    @SerializedName("comment")
    private String comment = null;

    @SerializedName("visibility")
    private CommandVisibility visibility = null;

    @SerializedName("query")
    private String query = null;

    @SerializedName("caret")
    private Integer caret = null;

    @SerializedName("silent")
    private Boolean silent = null;

    @SerializedName("runAs")
    private String runAs = null;

    @SerializedName("commands")
    private final List<ParsedCommand> commands = null;

    @SerializedName("issues")
    private List<Issue> issues = null;

    @SerializedName("suggestions")
    private final List<Suggestion> suggestions = null;

    @SerializedName("$type")
    private String $type = null;

    public CommandList() {
        this.$type = this.getClass().getSimpleName();
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public CommandList comment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Get comment
     *
     * @return comment
     **/
    @Schema(description = "")
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public CommandList visibility(CommandVisibility visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get visibility
     *
     * @return visibility
     **/
    @Schema(description = "")
    public CommandVisibility getVisibility() {
        return visibility;
    }

    public void setVisibility(CommandVisibility visibility) {
        this.visibility = visibility;
    }

    public CommandList query(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get query
     *
     * @return query
     **/
    @Schema(description = "")
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public CommandList caret(Integer caret) {
        this.caret = caret;
        return this;
    }

    /**
     * Get caret
     *
     * @return caret
     **/
    @Schema(description = "")
    public Integer getCaret() {
        return caret;
    }

    public void setCaret(Integer caret) {
        this.caret = caret;
    }

    public CommandList silent(Boolean silent) {
        this.silent = silent;
        return this;
    }

    /**
     * Get silent
     *
     * @return silent
     **/
    @Schema(description = "")
    public Boolean isSilent() {
        return silent;
    }

    public void setSilent(Boolean silent) {
        this.silent = silent;
    }

    public CommandList runAs(String runAs) {
        this.runAs = runAs;
        return this;
    }

    /**
     * Get runAs
     *
     * @return runAs
     **/
    @Schema(description = "")
    public String getRunAs() {
        return runAs;
    }

    public void setRunAs(String runAs) {
        this.runAs = runAs;
    }

    /**
     * Get commands
     *
     * @return commands
     **/
    @Schema(description = "")
    public List<ParsedCommand> getCommands() {
        return commands;
    }

    public CommandList issues(List<Issue> issues) {
        this.issues = issues;
        return this;
    }

    public CommandList addIssuesItem(Issue issuesItem) {
        if (this.issues == null) {
            this.issues = new ArrayList<Issue>();
        }
        this.issues.add(issuesItem);
        return this;
    }

    /**
     * Get issues
     *
     * @return issues
     **/
    @Schema(description = "")
    public List<Issue> getIssues() {
        return issues;
    }

    public void setIssues(List<Issue> issues) {
        this.issues = issues;
    }

    /**
     * Get suggestions
     *
     * @return suggestions
     **/
    @Schema(description = "")
    public List<Suggestion> getSuggestions() {
        return suggestions;
    }

    /**
     * Get $type
     *
     * @return $type
     **/
    @Schema(description = "")
    public String get$Type() {
        return $type;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommandList commandList = (CommandList) o;
        return Objects.equals(this.id, commandList.id) &&
                Objects.equals(this.comment, commandList.comment) &&
                Objects.equals(this.visibility, commandList.visibility) &&
                Objects.equals(this.query, commandList.query) &&
                Objects.equals(this.caret, commandList.caret) &&
                Objects.equals(this.silent, commandList.silent) &&
                Objects.equals(this.runAs, commandList.runAs) &&
                Objects.equals(this.commands, commandList.commands) &&
                Objects.equals(this.issues, commandList.issues) &&
                Objects.equals(this.suggestions, commandList.suggestions) &&
                Objects.equals(this.$type, commandList.$type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, comment, visibility, query, caret, silent, runAs, commands, issues, suggestions, $type);
    }


    @Override
    public String toString() {

        String sb = "class CommandList {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    comment: " + toIndentedString(comment) + "\n" +
                "    visibility: " + toIndentedString(visibility) + "\n" +
                "    query: " + toIndentedString(query) + "\n" +
                "    caret: " + toIndentedString(caret) + "\n" +
                "    silent: " + toIndentedString(silent) + "\n" +
                "    runAs: " + toIndentedString(runAs) + "\n" +
                "    commands: " + toIndentedString(commands) + "\n" +
                "    issues: " + toIndentedString(issues) + "\n" +
                "    suggestions: " + toIndentedString(suggestions) + "\n" +
                "    $type: " + toIndentedString($type) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

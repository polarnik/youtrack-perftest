/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * UserGroup
 */


public class UserGroup extends AuthorityHolder {
    @SerializedName("description")
    private String description = null;

    @SerializedName("iconUrl")
    private String iconUrl = null;

    @SerializedName("autoJoin")
    private Boolean autoJoin = null;

    @SerializedName("autoJoinDomain")
    private String autoJoinDomain = null;

    @SerializedName("requiredTwoFactorAuthentication")
    private Boolean requiredTwoFactorAuthentication = null;

    @SerializedName("parentsRequireTwoFactorAuthentication")
    private Boolean parentsRequireTwoFactorAuthentication = null;

    @SerializedName("users")
    private List<User> users = null;

    @SerializedName("ownUsers")
    private List<User> ownUsers = null;

    @SerializedName("userCount")
    private Integer userCount = null;

    @SerializedName("parent")
    private UserGroup parent = null;

    @SerializedName("subgroups")
    private List<UserGroup> subgroups = null;

    @SerializedName("teams")
    private List<ProjectTeam> teams = null;

    @SerializedName("organizations")
    private List<Organization> organizations = null;

    @SerializedName("project")
    private Project project = null;

    @SerializedName("allUsers")
    private Boolean allUsers = null;

    @SerializedName("registeredUsers")
    private Boolean registeredUsers = null;

    @SerializedName("implicit")
    private Boolean implicit = null;

    @SerializedName("queriedSingleton")
    private Boolean queriedSingleton = null;

    @SerializedName("removable")
    private Boolean removable = null;

    @SerializedName("immutable")
    private Boolean immutable = null;

    public UserGroup description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     **/
    @Schema(description = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public UserGroup iconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * Get iconUrl
     *
     * @return iconUrl
     **/
    @Schema(description = "")
    public String getIconUrl() {
        return iconUrl;
    }

    public void setIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
    }

    public UserGroup autoJoin(Boolean autoJoin) {
        this.autoJoin = autoJoin;
        return this;
    }

    /**
     * Get autoJoin
     *
     * @return autoJoin
     **/
    @Schema(description = "")
    public Boolean isAutoJoin() {
        return autoJoin;
    }

    public void setAutoJoin(Boolean autoJoin) {
        this.autoJoin = autoJoin;
    }

    public UserGroup autoJoinDomain(String autoJoinDomain) {
        this.autoJoinDomain = autoJoinDomain;
        return this;
    }

    /**
     * Get autoJoinDomain
     *
     * @return autoJoinDomain
     **/
    @Schema(description = "")
    public String getAutoJoinDomain() {
        return autoJoinDomain;
    }

    public void setAutoJoinDomain(String autoJoinDomain) {
        this.autoJoinDomain = autoJoinDomain;
    }

    public UserGroup requiredTwoFactorAuthentication(Boolean requiredTwoFactorAuthentication) {
        this.requiredTwoFactorAuthentication = requiredTwoFactorAuthentication;
        return this;
    }

    /**
     * Get requiredTwoFactorAuthentication
     *
     * @return requiredTwoFactorAuthentication
     **/
    @Schema(description = "")
    public Boolean isRequiredTwoFactorAuthentication() {
        return requiredTwoFactorAuthentication;
    }

    public void setRequiredTwoFactorAuthentication(Boolean requiredTwoFactorAuthentication) {
        this.requiredTwoFactorAuthentication = requiredTwoFactorAuthentication;
    }

    public UserGroup parentsRequireTwoFactorAuthentication(Boolean parentsRequireTwoFactorAuthentication) {
        this.parentsRequireTwoFactorAuthentication = parentsRequireTwoFactorAuthentication;
        return this;
    }

    /**
     * Get parentsRequireTwoFactorAuthentication
     *
     * @return parentsRequireTwoFactorAuthentication
     **/
    @Schema(description = "")
    public Boolean isParentsRequireTwoFactorAuthentication() {
        return parentsRequireTwoFactorAuthentication;
    }

    public void setParentsRequireTwoFactorAuthentication(Boolean parentsRequireTwoFactorAuthentication) {
        this.parentsRequireTwoFactorAuthentication = parentsRequireTwoFactorAuthentication;
    }

    public UserGroup users(List<User> users) {
        this.users = users;
        return this;
    }

    public UserGroup addUsersItem(User usersItem) {
        if (this.users == null) {
            this.users = new ArrayList<User>();
        }
        this.users.add(usersItem);
        return this;
    }

    /**
     * Get users
     *
     * @return users
     **/
    @Schema(description = "")
    public List<User> getUsers() {
        return users;
    }

    public void setUsers(List<User> users) {
        this.users = users;
    }

    public UserGroup ownUsers(List<User> ownUsers) {
        this.ownUsers = ownUsers;
        return this;
    }

    public UserGroup addOwnUsersItem(User ownUsersItem) {
        if (this.ownUsers == null) {
            this.ownUsers = new ArrayList<User>();
        }
        this.ownUsers.add(ownUsersItem);
        return this;
    }

    /**
     * Get ownUsers
     *
     * @return ownUsers
     **/
    @Schema(description = "")
    public List<User> getOwnUsers() {
        return ownUsers;
    }

    public void setOwnUsers(List<User> ownUsers) {
        this.ownUsers = ownUsers;
    }

    public UserGroup userCount(Integer userCount) {
        this.userCount = userCount;
        return this;
    }

    /**
     * Get userCount
     *
     * @return userCount
     **/
    @Schema(description = "")
    public Integer getUserCount() {
        return userCount;
    }

    public void setUserCount(Integer userCount) {
        this.userCount = userCount;
    }

    public UserGroup parent(UserGroup parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Get parent
     *
     * @return parent
     **/
    @Schema(description = "")
    public UserGroup getParent() {
        return parent;
    }

    public void setParent(UserGroup parent) {
        this.parent = parent;
    }

    public UserGroup subgroups(List<UserGroup> subgroups) {
        this.subgroups = subgroups;
        return this;
    }

    public UserGroup addSubgroupsItem(UserGroup subgroupsItem) {
        if (this.subgroups == null) {
            this.subgroups = new ArrayList<UserGroup>();
        }
        this.subgroups.add(subgroupsItem);
        return this;
    }

    /**
     * Get subgroups
     *
     * @return subgroups
     **/
    @Schema(description = "")
    public List<UserGroup> getSubgroups() {
        return subgroups;
    }

    public void setSubgroups(List<UserGroup> subgroups) {
        this.subgroups = subgroups;
    }

    public UserGroup teams(List<ProjectTeam> teams) {
        this.teams = teams;
        return this;
    }

    public UserGroup addTeamsItem(ProjectTeam teamsItem) {
        if (this.teams == null) {
            this.teams = new ArrayList<ProjectTeam>();
        }
        this.teams.add(teamsItem);
        return this;
    }

    /**
     * Get teams
     *
     * @return teams
     **/
    @Schema(description = "")
    public List<ProjectTeam> getTeams() {
        return teams;
    }

    public void setTeams(List<ProjectTeam> teams) {
        this.teams = teams;
    }

    public UserGroup organizations(List<Organization> organizations) {
        this.organizations = organizations;
        return this;
    }

    public UserGroup addOrganizationsItem(Organization organizationsItem) {
        if (this.organizations == null) {
            this.organizations = new ArrayList<Organization>();
        }
        this.organizations.add(organizationsItem);
        return this;
    }

    /**
     * Get organizations
     *
     * @return organizations
     **/
    @Schema(description = "")
    public List<Organization> getOrganizations() {
        return organizations;
    }

    public void setOrganizations(List<Organization> organizations) {
        this.organizations = organizations;
    }

    public UserGroup project(Project project) {
        this.project = project;
        return this;
    }

    /**
     * Get project
     *
     * @return project
     **/
    @Schema(description = "")
    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public UserGroup allUsers(Boolean allUsers) {
        this.allUsers = allUsers;
        return this;
    }

    /**
     * Get allUsers
     *
     * @return allUsers
     **/
    @Schema(description = "")
    public Boolean isAllUsers() {
        return allUsers;
    }

    public void setAllUsers(Boolean allUsers) {
        this.allUsers = allUsers;
    }

    public UserGroup registeredUsers(Boolean registeredUsers) {
        this.registeredUsers = registeredUsers;
        return this;
    }

    /**
     * Get registeredUsers
     *
     * @return registeredUsers
     **/
    @Schema(description = "")
    public Boolean isRegisteredUsers() {
        return registeredUsers;
    }

    public void setRegisteredUsers(Boolean registeredUsers) {
        this.registeredUsers = registeredUsers;
    }

    public UserGroup implicit(Boolean implicit) {
        this.implicit = implicit;
        return this;
    }

    /**
     * Get implicit
     *
     * @return implicit
     **/
    @Schema(description = "")
    public Boolean isImplicit() {
        return implicit;
    }

    public void setImplicit(Boolean implicit) {
        this.implicit = implicit;
    }

    public UserGroup queriedSingleton(Boolean queriedSingleton) {
        this.queriedSingleton = queriedSingleton;
        return this;
    }

    /**
     * Get queriedSingleton
     *
     * @return queriedSingleton
     **/
    @Schema(description = "")
    public Boolean isQueriedSingleton() {
        return queriedSingleton;
    }

    public void setQueriedSingleton(Boolean queriedSingleton) {
        this.queriedSingleton = queriedSingleton;
    }

    public UserGroup removable(Boolean removable) {
        this.removable = removable;
        return this;
    }

    /**
     * Get removable
     *
     * @return removable
     **/
    @Schema(description = "")
    public Boolean isRemovable() {
        return removable;
    }

    public void setRemovable(Boolean removable) {
        this.removable = removable;
    }

    public UserGroup immutable(Boolean immutable) {
        this.immutable = immutable;
        return this;
    }

    /**
     * Get immutable
     *
     * @return immutable
     **/
    @Schema(description = "")
    public Boolean isImmutable() {
        return immutable;
    }

    public void setImmutable(Boolean immutable) {
        this.immutable = immutable;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserGroup userGroup = (UserGroup) o;
        return Objects.equals(this.description, userGroup.description) &&
                Objects.equals(this.iconUrl, userGroup.iconUrl) &&
                Objects.equals(this.autoJoin, userGroup.autoJoin) &&
                Objects.equals(this.autoJoinDomain, userGroup.autoJoinDomain) &&
                Objects.equals(this.requiredTwoFactorAuthentication, userGroup.requiredTwoFactorAuthentication) &&
                Objects.equals(this.parentsRequireTwoFactorAuthentication, userGroup.parentsRequireTwoFactorAuthentication) &&
                Objects.equals(this.users, userGroup.users) &&
                Objects.equals(this.ownUsers, userGroup.ownUsers) &&
                Objects.equals(this.userCount, userGroup.userCount) &&
                Objects.equals(this.parent, userGroup.parent) &&
                Objects.equals(this.subgroups, userGroup.subgroups) &&
                Objects.equals(this.teams, userGroup.teams) &&
                Objects.equals(this.organizations, userGroup.organizations) &&
                Objects.equals(this.project, userGroup.project) &&
                Objects.equals(this.allUsers, userGroup.allUsers) &&
                Objects.equals(this.registeredUsers, userGroup.registeredUsers) &&
                Objects.equals(this.implicit, userGroup.implicit) &&
                Objects.equals(this.queriedSingleton, userGroup.queriedSingleton) &&
                Objects.equals(this.removable, userGroup.removable) &&
                Objects.equals(this.immutable, userGroup.immutable) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(description, iconUrl, autoJoin, autoJoinDomain, requiredTwoFactorAuthentication, parentsRequireTwoFactorAuthentication, users, ownUsers, userCount, parent, subgroups, teams, organizations, project, allUsers, registeredUsers, implicit, queriedSingleton, removable, immutable, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class UserGroup {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    iconUrl: " + toIndentedString(iconUrl) + "\n" +
                "    autoJoin: " + toIndentedString(autoJoin) + "\n" +
                "    autoJoinDomain: " + toIndentedString(autoJoinDomain) + "\n" +
                "    requiredTwoFactorAuthentication: " + toIndentedString(requiredTwoFactorAuthentication) + "\n" +
                "    parentsRequireTwoFactorAuthentication: " + toIndentedString(parentsRequireTwoFactorAuthentication) + "\n" +
                "    users: " + toIndentedString(users) + "\n" +
                "    ownUsers: " + toIndentedString(ownUsers) + "\n" +
                "    userCount: " + toIndentedString(userCount) + "\n" +
                "    parent: " + toIndentedString(parent) + "\n" +
                "    subgroups: " + toIndentedString(subgroups) + "\n" +
                "    teams: " + toIndentedString(teams) + "\n" +
                "    organizations: " + toIndentedString(organizations) + "\n" +
                "    project: " + toIndentedString(project) + "\n" +
                "    allUsers: " + toIndentedString(allUsers) + "\n" +
                "    registeredUsers: " + toIndentedString(registeredUsers) + "\n" +
                "    implicit: " + toIndentedString(implicit) + "\n" +
                "    queriedSingleton: " + toIndentedString(queriedSingleton) + "\n" +
                "    removable: " + toIndentedString(removable) + "\n" +
                "    immutable: " + toIndentedString(immutable) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

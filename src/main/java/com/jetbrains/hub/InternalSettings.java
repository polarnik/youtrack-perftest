/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * InternalSettings
 */


public class InternalSettings extends Settings {
    @SerializedName("tokenInterval")
    private Integer tokenInterval = null;

    @SerializedName("sessionInterval")
    private Integer sessionInterval = null;

    @SerializedName("rememberMeInterval")
    private Integer rememberMeInterval = null;

    @SerializedName("hashAnonymization")
    private Boolean hashAnonymization = null;

    @SerializedName("captchaPublicKey")
    private String captchaPublicKey = null;

    @SerializedName("captchaPrivateKey")
    private String captchaPrivateKey = null;

    @SerializedName("debugCategories")
    private List<String> debugCategories = null;

    public InternalSettings tokenInterval(Integer tokenInterval) {
        this.tokenInterval = tokenInterval;
        return this;
    }

    /**
     * Get tokenInterval
     *
     * @return tokenInterval
     **/
    @Schema(description = "")
    public Integer getTokenInterval() {
        return tokenInterval;
    }

    public void setTokenInterval(Integer tokenInterval) {
        this.tokenInterval = tokenInterval;
    }

    public InternalSettings sessionInterval(Integer sessionInterval) {
        this.sessionInterval = sessionInterval;
        return this;
    }

    /**
     * Get sessionInterval
     *
     * @return sessionInterval
     **/
    @Schema(description = "")
    public Integer getSessionInterval() {
        return sessionInterval;
    }

    public void setSessionInterval(Integer sessionInterval) {
        this.sessionInterval = sessionInterval;
    }

    public InternalSettings rememberMeInterval(Integer rememberMeInterval) {
        this.rememberMeInterval = rememberMeInterval;
        return this;
    }

    /**
     * Get rememberMeInterval
     *
     * @return rememberMeInterval
     **/
    @Schema(description = "")
    public Integer getRememberMeInterval() {
        return rememberMeInterval;
    }

    public void setRememberMeInterval(Integer rememberMeInterval) {
        this.rememberMeInterval = rememberMeInterval;
    }

    public InternalSettings hashAnonymization(Boolean hashAnonymization) {
        this.hashAnonymization = hashAnonymization;
        return this;
    }

    /**
     * Get hashAnonymization
     *
     * @return hashAnonymization
     **/
    @Schema(description = "")
    public Boolean isHashAnonymization() {
        return hashAnonymization;
    }

    public void setHashAnonymization(Boolean hashAnonymization) {
        this.hashAnonymization = hashAnonymization;
    }

    public InternalSettings captchaPublicKey(String captchaPublicKey) {
        this.captchaPublicKey = captchaPublicKey;
        return this;
    }

    /**
     * Get captchaPublicKey
     *
     * @return captchaPublicKey
     **/
    @Schema(description = "")
    public String getCaptchaPublicKey() {
        return captchaPublicKey;
    }

    public void setCaptchaPublicKey(String captchaPublicKey) {
        this.captchaPublicKey = captchaPublicKey;
    }

    public InternalSettings captchaPrivateKey(String captchaPrivateKey) {
        this.captchaPrivateKey = captchaPrivateKey;
        return this;
    }

    /**
     * Get captchaPrivateKey
     *
     * @return captchaPrivateKey
     **/
    @Schema(description = "")
    public String getCaptchaPrivateKey() {
        return captchaPrivateKey;
    }

    public void setCaptchaPrivateKey(String captchaPrivateKey) {
        this.captchaPrivateKey = captchaPrivateKey;
    }

    public InternalSettings debugCategories(List<String> debugCategories) {
        this.debugCategories = debugCategories;
        return this;
    }

    public InternalSettings addDebugCategoriesItem(String debugCategoriesItem) {
        if (this.debugCategories == null) {
            this.debugCategories = new ArrayList<String>();
        }
        this.debugCategories.add(debugCategoriesItem);
        return this;
    }

    /**
     * Get debugCategories
     *
     * @return debugCategories
     **/
    @Schema(description = "")
    public List<String> getDebugCategories() {
        return debugCategories;
    }

    public void setDebugCategories(List<String> debugCategories) {
        this.debugCategories = debugCategories;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InternalSettings internalSettings = (InternalSettings) o;
        return Objects.equals(this.tokenInterval, internalSettings.tokenInterval) &&
                Objects.equals(this.sessionInterval, internalSettings.sessionInterval) &&
                Objects.equals(this.rememberMeInterval, internalSettings.rememberMeInterval) &&
                Objects.equals(this.hashAnonymization, internalSettings.hashAnonymization) &&
                Objects.equals(this.captchaPublicKey, internalSettings.captchaPublicKey) &&
                Objects.equals(this.captchaPrivateKey, internalSettings.captchaPrivateKey) &&
                Objects.equals(this.debugCategories, internalSettings.debugCategories) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tokenInterval, sessionInterval, rememberMeInterval, hashAnonymization, captchaPublicKey, captchaPrivateKey, debugCategories, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class InternalSettings {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    tokenInterval: " + toIndentedString(tokenInterval) + "\n" +
                "    sessionInterval: " + toIndentedString(sessionInterval) + "\n" +
                "    rememberMeInterval: " + toIndentedString(rememberMeInterval) + "\n" +
                "    hashAnonymization: " + toIndentedString(hashAnonymization) + "\n" +
                "    captchaPublicKey: " + toIndentedString(captchaPublicKey) + "\n" +
                "    captchaPrivateKey: " + toIndentedString(captchaPrivateKey) + "\n" +
                "    debugCategories: " + toIndentedString(debugCategories) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

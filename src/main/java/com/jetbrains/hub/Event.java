/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Event
 */


public class Event {
    @SerializedName("id")
    private String id = null;

    @SerializedName("aliases")
    private List<Alias> aliases = null;

    @SerializedName("targetId")
    private String targetId = null;

    @SerializedName("targetType")
    private String targetType = null;

    @SerializedName("targetPresentation")
    private String targetPresentation = null;

    @SerializedName("author")
    private String author = null;

    @SerializedName("authorPresentation")
    private String authorPresentation = null;

    @SerializedName("authorType")
    private String authorType = null;

    @SerializedName("changes")
    private List<Change> changes = null;

    @SerializedName("type")
    private String type = null;

    @SerializedName("timestamp")
    private Long timestamp = null;

    @SerializedName("eraseTimestamp")
    private Long eraseTimestamp = null;

    public Event id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Event aliases(List<Alias> aliases) {
        this.aliases = aliases;
        return this;
    }

    public Event addAliasesItem(Alias aliasesItem) {
        if (this.aliases == null) {
            this.aliases = new ArrayList<Alias>();
        }
        this.aliases.add(aliasesItem);
        return this;
    }

    /**
     * Get aliases
     *
     * @return aliases
     **/
    @Schema(description = "")
    public List<Alias> getAliases() {
        return aliases;
    }

    public void setAliases(List<Alias> aliases) {
        this.aliases = aliases;
    }

    public Event targetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get targetId
     *
     * @return targetId
     **/
    @Schema(description = "")
    public String getTargetId() {
        return targetId;
    }

    public void setTargetId(String targetId) {
        this.targetId = targetId;
    }

    public Event targetType(String targetType) {
        this.targetType = targetType;
        return this;
    }

    /**
     * Get targetType
     *
     * @return targetType
     **/
    @Schema(description = "")
    public String getTargetType() {
        return targetType;
    }

    public void setTargetType(String targetType) {
        this.targetType = targetType;
    }

    public Event targetPresentation(String targetPresentation) {
        this.targetPresentation = targetPresentation;
        return this;
    }

    /**
     * Get targetPresentation
     *
     * @return targetPresentation
     **/
    @Schema(description = "")
    public String getTargetPresentation() {
        return targetPresentation;
    }

    public void setTargetPresentation(String targetPresentation) {
        this.targetPresentation = targetPresentation;
    }

    public Event author(String author) {
        this.author = author;
        return this;
    }

    /**
     * Get author
     *
     * @return author
     **/
    @Schema(description = "")
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Event authorPresentation(String authorPresentation) {
        this.authorPresentation = authorPresentation;
        return this;
    }

    /**
     * Get authorPresentation
     *
     * @return authorPresentation
     **/
    @Schema(description = "")
    public String getAuthorPresentation() {
        return authorPresentation;
    }

    public void setAuthorPresentation(String authorPresentation) {
        this.authorPresentation = authorPresentation;
    }

    public Event authorType(String authorType) {
        this.authorType = authorType;
        return this;
    }

    /**
     * Get authorType
     *
     * @return authorType
     **/
    @Schema(description = "")
    public String getAuthorType() {
        return authorType;
    }

    public void setAuthorType(String authorType) {
        this.authorType = authorType;
    }

    public Event changes(List<Change> changes) {
        this.changes = changes;
        return this;
    }

    public Event addChangesItem(Change changesItem) {
        if (this.changes == null) {
            this.changes = new ArrayList<Change>();
        }
        this.changes.add(changesItem);
        return this;
    }

    /**
     * Get changes
     *
     * @return changes
     **/
    @Schema(description = "")
    public List<Change> getChanges() {
        return changes;
    }

    public void setChanges(List<Change> changes) {
        this.changes = changes;
    }

    public Event type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @Schema(description = "")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Event timestamp(Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     *
     * @return timestamp
     **/
    @Schema(description = "")
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public Event eraseTimestamp(Long eraseTimestamp) {
        this.eraseTimestamp = eraseTimestamp;
        return this;
    }

    /**
     * Get eraseTimestamp
     *
     * @return eraseTimestamp
     **/
    @Schema(description = "")
    public Long getEraseTimestamp() {
        return eraseTimestamp;
    }

    public void setEraseTimestamp(Long eraseTimestamp) {
        this.eraseTimestamp = eraseTimestamp;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Event event = (Event) o;
        return Objects.equals(this.id, event.id) &&
                Objects.equals(this.aliases, event.aliases) &&
                Objects.equals(this.targetId, event.targetId) &&
                Objects.equals(this.targetType, event.targetType) &&
                Objects.equals(this.targetPresentation, event.targetPresentation) &&
                Objects.equals(this.author, event.author) &&
                Objects.equals(this.authorPresentation, event.authorPresentation) &&
                Objects.equals(this.authorType, event.authorType) &&
                Objects.equals(this.changes, event.changes) &&
                Objects.equals(this.type, event.type) &&
                Objects.equals(this.timestamp, event.timestamp) &&
                Objects.equals(this.eraseTimestamp, event.eraseTimestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, aliases, targetId, targetType, targetPresentation, author, authorPresentation, authorType, changes, type, timestamp, eraseTimestamp);
    }


    @Override
    public String toString() {

        String sb = "class Event {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    aliases: " + toIndentedString(aliases) + "\n" +
                "    targetId: " + toIndentedString(targetId) + "\n" +
                "    targetType: " + toIndentedString(targetType) + "\n" +
                "    targetPresentation: " + toIndentedString(targetPresentation) + "\n" +
                "    author: " + toIndentedString(author) + "\n" +
                "    authorPresentation: " + toIndentedString(authorPresentation) + "\n" +
                "    authorType: " + toIndentedString(authorType) + "\n" +
                "    changes: " + toIndentedString(changes) + "\n" +
                "    type: " + toIndentedString(type) + "\n" +
                "    timestamp: " + toIndentedString(timestamp) + "\n" +
                "    eraseTimestamp: " + toIndentedString(eraseTimestamp) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * Database
 */


public class Database {
    @SerializedName("location")
    private String location = null;

    @SerializedName("dataSize")
    private Long dataSize = null;

    @SerializedName("textIndexSize")
    private Long textIndexSize = null;

    @SerializedName("blobsSize")
    private Long blobsSize = null;

    @SerializedName("backgroundThreadsCount")
    private Integer backgroundThreadsCount = null;

    @SerializedName("pendingJobsCount")
    private Integer pendingJobsCount = null;

    @SerializedName("entityIterableCacheSize")
    private Integer entityIterableCacheSize = null;

    @SerializedName("entityIterableCacheHitRate")
    private Double entityIterableCacheHitRate = null;

    @SerializedName("transactionsCount")
    private Long transactionsCount = null;

    @SerializedName("transactionsPerSecond")
    private Double transactionsPerSecond = null;

    public Database location(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get location
     *
     * @return location
     **/
    @Schema(description = "")
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Database dataSize(Long dataSize) {
        this.dataSize = dataSize;
        return this;
    }

    /**
     * Get dataSize
     *
     * @return dataSize
     **/
    @Schema(description = "")
    public Long getDataSize() {
        return dataSize;
    }

    public void setDataSize(Long dataSize) {
        this.dataSize = dataSize;
    }

    public Database textIndexSize(Long textIndexSize) {
        this.textIndexSize = textIndexSize;
        return this;
    }

    /**
     * Get textIndexSize
     *
     * @return textIndexSize
     **/
    @Schema(description = "")
    public Long getTextIndexSize() {
        return textIndexSize;
    }

    public void setTextIndexSize(Long textIndexSize) {
        this.textIndexSize = textIndexSize;
    }

    public Database blobsSize(Long blobsSize) {
        this.blobsSize = blobsSize;
        return this;
    }

    /**
     * Get blobsSize
     *
     * @return blobsSize
     **/
    @Schema(description = "")
    public Long getBlobsSize() {
        return blobsSize;
    }

    public void setBlobsSize(Long blobsSize) {
        this.blobsSize = blobsSize;
    }

    public Database backgroundThreadsCount(Integer backgroundThreadsCount) {
        this.backgroundThreadsCount = backgroundThreadsCount;
        return this;
    }

    /**
     * Get backgroundThreadsCount
     *
     * @return backgroundThreadsCount
     **/
    @Schema(description = "")
    public Integer getBackgroundThreadsCount() {
        return backgroundThreadsCount;
    }

    public void setBackgroundThreadsCount(Integer backgroundThreadsCount) {
        this.backgroundThreadsCount = backgroundThreadsCount;
    }

    public Database pendingJobsCount(Integer pendingJobsCount) {
        this.pendingJobsCount = pendingJobsCount;
        return this;
    }

    /**
     * Get pendingJobsCount
     *
     * @return pendingJobsCount
     **/
    @Schema(description = "")
    public Integer getPendingJobsCount() {
        return pendingJobsCount;
    }

    public void setPendingJobsCount(Integer pendingJobsCount) {
        this.pendingJobsCount = pendingJobsCount;
    }

    public Database entityIterableCacheSize(Integer entityIterableCacheSize) {
        this.entityIterableCacheSize = entityIterableCacheSize;
        return this;
    }

    /**
     * Get entityIterableCacheSize
     *
     * @return entityIterableCacheSize
     **/
    @Schema(description = "")
    public Integer getEntityIterableCacheSize() {
        return entityIterableCacheSize;
    }

    public void setEntityIterableCacheSize(Integer entityIterableCacheSize) {
        this.entityIterableCacheSize = entityIterableCacheSize;
    }

    public Database entityIterableCacheHitRate(Double entityIterableCacheHitRate) {
        this.entityIterableCacheHitRate = entityIterableCacheHitRate;
        return this;
    }

    /**
     * Get entityIterableCacheHitRate
     *
     * @return entityIterableCacheHitRate
     **/
    @Schema(description = "")
    public Double getEntityIterableCacheHitRate() {
        return entityIterableCacheHitRate;
    }

    public void setEntityIterableCacheHitRate(Double entityIterableCacheHitRate) {
        this.entityIterableCacheHitRate = entityIterableCacheHitRate;
    }

    public Database transactionsCount(Long transactionsCount) {
        this.transactionsCount = transactionsCount;
        return this;
    }

    /**
     * Get transactionsCount
     *
     * @return transactionsCount
     **/
    @Schema(description = "")
    public Long getTransactionsCount() {
        return transactionsCount;
    }

    public void setTransactionsCount(Long transactionsCount) {
        this.transactionsCount = transactionsCount;
    }

    public Database transactionsPerSecond(Double transactionsPerSecond) {
        this.transactionsPerSecond = transactionsPerSecond;
        return this;
    }

    /**
     * Get transactionsPerSecond
     *
     * @return transactionsPerSecond
     **/
    @Schema(description = "")
    public Double getTransactionsPerSecond() {
        return transactionsPerSecond;
    }

    public void setTransactionsPerSecond(Double transactionsPerSecond) {
        this.transactionsPerSecond = transactionsPerSecond;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Database database = (Database) o;
        return Objects.equals(this.location, database.location) &&
                Objects.equals(this.dataSize, database.dataSize) &&
                Objects.equals(this.textIndexSize, database.textIndexSize) &&
                Objects.equals(this.blobsSize, database.blobsSize) &&
                Objects.equals(this.backgroundThreadsCount, database.backgroundThreadsCount) &&
                Objects.equals(this.pendingJobsCount, database.pendingJobsCount) &&
                Objects.equals(this.entityIterableCacheSize, database.entityIterableCacheSize) &&
                Objects.equals(this.entityIterableCacheHitRate, database.entityIterableCacheHitRate) &&
                Objects.equals(this.transactionsCount, database.transactionsCount) &&
                Objects.equals(this.transactionsPerSecond, database.transactionsPerSecond);
    }

    @Override
    public int hashCode() {
        return Objects.hash(location, dataSize, textIndexSize, blobsSize, backgroundThreadsCount, pendingJobsCount, entityIterableCacheSize, entityIterableCacheHitRate, transactionsCount, transactionsPerSecond);
    }


    @Override
    public String toString() {

        String sb = "class Database {\n" +
                "    location: " + toIndentedString(location) + "\n" +
                "    dataSize: " + toIndentedString(dataSize) + "\n" +
                "    textIndexSize: " + toIndentedString(textIndexSize) + "\n" +
                "    blobsSize: " + toIndentedString(blobsSize) + "\n" +
                "    backgroundThreadsCount: " + toIndentedString(backgroundThreadsCount) + "\n" +
                "    pendingJobsCount: " + toIndentedString(pendingJobsCount) + "\n" +
                "    entityIterableCacheSize: " + toIndentedString(entityIterableCacheSize) + "\n" +
                "    entityIterableCacheHitRate: " + toIndentedString(entityIterableCacheHitRate) + "\n" +
                "    transactionsCount: " + toIndentedString(transactionsCount) + "\n" +
                "    transactionsPerSecond: " + toIndentedString(transactionsPerSecond) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

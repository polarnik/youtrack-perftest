/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PermanentToken
 */


public class PermanentToken {
    @SerializedName("id")
    private String id = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("token")
    private String token = null;

    @SerializedName("scope")
    private List<Service> scope = null;

    @SerializedName("user")
    private User user = null;

    @SerializedName("author")
    private AuthorityHolder author = null;

    @SerializedName("creationTime")
    private Long creationTime = null;

    @SerializedName("lastAccessTime")
    private Long lastAccessTime = null;

    public PermanentToken id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public PermanentToken name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Schema(description = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public PermanentToken token(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get token
     *
     * @return token
     **/
    @Schema(description = "")
    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public PermanentToken scope(List<Service> scope) {
        this.scope = scope;
        return this;
    }

    public PermanentToken addScopeItem(Service scopeItem) {
        if (this.scope == null) {
            this.scope = new ArrayList<Service>();
        }
        this.scope.add(scopeItem);
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     **/
    @Schema(description = "")
    public List<Service> getScope() {
        return scope;
    }

    public void setScope(List<Service> scope) {
        this.scope = scope;
    }

    public PermanentToken user(User user) {
        this.user = user;
        return this;
    }

    /**
     * Get user
     *
     * @return user
     **/
    @Schema(description = "")
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public PermanentToken author(AuthorityHolder author) {
        this.author = author;
        return this;
    }

    /**
     * Get author
     *
     * @return author
     **/
    @Schema(description = "")
    public AuthorityHolder getAuthor() {
        return author;
    }

    public void setAuthor(AuthorityHolder author) {
        this.author = author;
    }

    public PermanentToken creationTime(Long creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get creationTime
     *
     * @return creationTime
     **/
    @Schema(description = "")
    public Long getCreationTime() {
        return creationTime;
    }

    public void setCreationTime(Long creationTime) {
        this.creationTime = creationTime;
    }

    public PermanentToken lastAccessTime(Long lastAccessTime) {
        this.lastAccessTime = lastAccessTime;
        return this;
    }

    /**
     * Get lastAccessTime
     *
     * @return lastAccessTime
     **/
    @Schema(description = "")
    public Long getLastAccessTime() {
        return lastAccessTime;
    }

    public void setLastAccessTime(Long lastAccessTime) {
        this.lastAccessTime = lastAccessTime;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PermanentToken permanentToken = (PermanentToken) o;
        return Objects.equals(this.id, permanentToken.id) &&
                Objects.equals(this.name, permanentToken.name) &&
                Objects.equals(this.token, permanentToken.token) &&
                Objects.equals(this.scope, permanentToken.scope) &&
                Objects.equals(this.user, permanentToken.user) &&
                Objects.equals(this.author, permanentToken.author) &&
                Objects.equals(this.creationTime, permanentToken.creationTime) &&
                Objects.equals(this.lastAccessTime, permanentToken.lastAccessTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, token, scope, user, author, creationTime, lastAccessTime);
    }


    @Override
    public String toString() {

        String sb = "class PermanentToken {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    token: " + toIndentedString(token) + "\n" +
                "    scope: " + toIndentedString(scope) + "\n" +
                "    user: " + toIndentedString(user) + "\n" +
                "    author: " + toIndentedString(author) + "\n" +
                "    creationTime: " + toIndentedString(creationTime) + "\n" +
                "    lastAccessTime: " + toIndentedString(lastAccessTime) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * User
 */


public class User extends AuthorityHolder {
    @SerializedName("login")
    private String login = null;

    @SerializedName("banned")
    private Boolean banned = null;

    @SerializedName("banReason")
    private String banReason = null;

    @SerializedName("banBadge")
    private String banBadge = null;

    @SerializedName("guest")
    private Boolean guest = null;

    @SerializedName("avatar")
    private Avatar avatar = null;

    @SerializedName("profile")
    private Profile profile = null;

    @SerializedName("groups")
    private List<UserGroup> groups = null;

    @SerializedName("organizations")
    private List<Organization> organizations = null;

    @SerializedName("transitiveOrganizations")
    private List<Organization> transitiveOrganizations = null;

    @SerializedName("transitiveGroups")
    private List<UserGroup> transitiveGroups = null;

    @SerializedName("teams")
    private List<ProjectTeam> teams = null;

    @SerializedName("transitiveTeams")
    private List<ProjectTeam> transitiveTeams = null;

    @SerializedName("details")
    private List<Details> details = null;

    @SerializedName("VCSUserNames")
    private List<VcsUserName> vcSUserNames = null;

    @SerializedName("sshPublicKeys")
    private List<SshPublicKey> sshPublicKeys = null;

    @SerializedName("licenses")
    private List<License> licenses = null;

    @SerializedName("helpdeskProjectSettings")
    private List<ProjectHelpdeskSettings> helpdeskProjectSettings = null;

    @SerializedName("creationTime")
    private Long creationTime = null;

    @SerializedName("lastAccessTime")
    private Long lastAccessTime = null;

    @SerializedName("refreshTokens")
    private List<RefreshToken> refreshTokens = null;

    @SerializedName("permanentTokens")
    private List<PermanentToken> permanentTokens = null;

    @SerializedName("approvedScopes")
    private List<ApprovedScope> approvedScopes = null;

    @SerializedName("applicationPasswords")
    private List<ApplicationPassword> applicationPasswords = null;

    @SerializedName("favoriteProjects")
    private List<Project> favoriteProjects = null;

    @SerializedName("endUserAgreementConsent")
    private EndUserAgreementConsent endUserAgreementConsent = null;

    @SerializedName("eraseTimestamp")
    private Long eraseTimestamp = null;

    @SerializedName("twoFactorAuthentication")
    private TwoFactorAuthentication twoFactorAuthentication = null;

    @SerializedName("requiredTwoFactorAuthentication")
    private Boolean requiredTwoFactorAuthentication = null;

    @SerializedName("pendingTwoFactorAuthentication")
    private TwoFactorAuthenticationSecret pendingTwoFactorAuthentication = null;

    @SerializedName("webauthnDevice")
    private WebauthnDevice webauthnDevice = null;

    @SerializedName("userType")
    private UserType userType = null;

    public User() {
        this.type = this.getClass().getSimpleName();
    }

    public User login(String login) {
        this.login = login;
        return this;
    }

    /**
     * Get login
     *
     * @return login
     **/
    @Schema(description = "")
    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public User banned(Boolean banned) {
        this.banned = banned;
        return this;
    }

    /**
     * Get banned
     *
     * @return banned
     **/
    @Schema(description = "")
    public Boolean isBanned() {
        return banned;
    }

    public void setBanned(Boolean banned) {
        this.banned = banned;
    }

    public User banReason(String banReason) {
        this.banReason = banReason;
        return this;
    }

    /**
     * Get banReason
     *
     * @return banReason
     **/
    @Schema(description = "")
    public String getBanReason() {
        return banReason;
    }

    public void setBanReason(String banReason) {
        this.banReason = banReason;
    }

    public User banBadge(String banBadge) {
        this.banBadge = banBadge;
        return this;
    }

    /**
     * Get banBadge
     *
     * @return banBadge
     **/
    @Schema(description = "")
    public String getBanBadge() {
        return banBadge;
    }

    public void setBanBadge(String banBadge) {
        this.banBadge = banBadge;
    }

    public User guest(Boolean guest) {
        this.guest = guest;
        return this;
    }

    /**
     * Get guest
     *
     * @return guest
     **/
    @Schema(description = "")
    public Boolean isGuest() {
        return guest;
    }

    public void setGuest(Boolean guest) {
        this.guest = guest;
    }

    public User avatar(Avatar avatar) {
        this.avatar = avatar;
        return this;
    }

    /**
     * Get avatar
     *
     * @return avatar
     **/
    @Schema(description = "")
    public Avatar getAvatar() {
        return avatar;
    }

    public void setAvatar(Avatar avatar) {
        this.avatar = avatar;
    }

    public User profile(Profile profile) {
        this.profile = profile;
        return this;
    }

    /**
     * Get profile
     *
     * @return profile
     **/
    @Schema(description = "")
    public Profile getProfile() {
        return profile;
    }

    public void setProfile(Profile profile) {
        this.profile = profile;
    }

    public User groups(List<UserGroup> groups) {
        this.groups = groups;
        return this;
    }

    public User addGroupsItem(UserGroup groupsItem) {
        if (this.groups == null) {
            this.groups = new ArrayList<UserGroup>();
        }
        this.groups.add(groupsItem);
        return this;
    }

    /**
     * Get groups
     *
     * @return groups
     **/
    @Schema(description = "")
    public List<UserGroup> getGroups() {
        return groups;
    }

    public void setGroups(List<UserGroup> groups) {
        this.groups = groups;
    }

    public User organizations(List<Organization> organizations) {
        this.organizations = organizations;
        return this;
    }

    public User addOrganizationsItem(Organization organizationsItem) {
        if (this.organizations == null) {
            this.organizations = new ArrayList<Organization>();
        }
        this.organizations.add(organizationsItem);
        return this;
    }

    /**
     * Get organizations
     *
     * @return organizations
     **/
    @Schema(description = "")
    public List<Organization> getOrganizations() {
        return organizations;
    }

    public void setOrganizations(List<Organization> organizations) {
        this.organizations = organizations;
    }

    public User transitiveOrganizations(List<Organization> transitiveOrganizations) {
        this.transitiveOrganizations = transitiveOrganizations;
        return this;
    }

    public User addTransitiveOrganizationsItem(Organization transitiveOrganizationsItem) {
        if (this.transitiveOrganizations == null) {
            this.transitiveOrganizations = new ArrayList<Organization>();
        }
        this.transitiveOrganizations.add(transitiveOrganizationsItem);
        return this;
    }

    /**
     * Get transitiveOrganizations
     *
     * @return transitiveOrganizations
     **/
    @Schema(description = "")
    public List<Organization> getTransitiveOrganizations() {
        return transitiveOrganizations;
    }

    public void setTransitiveOrganizations(List<Organization> transitiveOrganizations) {
        this.transitiveOrganizations = transitiveOrganizations;
    }

    public User transitiveGroups(List<UserGroup> transitiveGroups) {
        this.transitiveGroups = transitiveGroups;
        return this;
    }

    public User addTransitiveGroupsItem(UserGroup transitiveGroupsItem) {
        if (this.transitiveGroups == null) {
            this.transitiveGroups = new ArrayList<UserGroup>();
        }
        this.transitiveGroups.add(transitiveGroupsItem);
        return this;
    }

    /**
     * Get transitiveGroups
     *
     * @return transitiveGroups
     **/
    @Schema(description = "")
    public List<UserGroup> getTransitiveGroups() {
        return transitiveGroups;
    }

    public void setTransitiveGroups(List<UserGroup> transitiveGroups) {
        this.transitiveGroups = transitiveGroups;
    }

    public User teams(List<ProjectTeam> teams) {
        this.teams = teams;
        return this;
    }

    public User addTeamsItem(ProjectTeam teamsItem) {
        if (this.teams == null) {
            this.teams = new ArrayList<ProjectTeam>();
        }
        this.teams.add(teamsItem);
        return this;
    }

    /**
     * Get teams
     *
     * @return teams
     **/
    @Schema(description = "")
    public List<ProjectTeam> getTeams() {
        return teams;
    }

    public void setTeams(List<ProjectTeam> teams) {
        this.teams = teams;
    }

    public User transitiveTeams(List<ProjectTeam> transitiveTeams) {
        this.transitiveTeams = transitiveTeams;
        return this;
    }

    public User addTransitiveTeamsItem(ProjectTeam transitiveTeamsItem) {
        if (this.transitiveTeams == null) {
            this.transitiveTeams = new ArrayList<ProjectTeam>();
        }
        this.transitiveTeams.add(transitiveTeamsItem);
        return this;
    }

    /**
     * Get transitiveTeams
     *
     * @return transitiveTeams
     **/
    @Schema(description = "")
    public List<ProjectTeam> getTransitiveTeams() {
        return transitiveTeams;
    }

    public void setTransitiveTeams(List<ProjectTeam> transitiveTeams) {
        this.transitiveTeams = transitiveTeams;
    }

    public User details(List<Details> details) {
        this.details = details;
        return this;
    }

    public User addDetailsItem(Details detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<Details>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Get details
     *
     * @return details
     **/
    @Schema(description = "")
    public List<Details> getDetails() {
        return details;
    }

    public void setDetails(List<Details> details) {
        this.details = details;
    }

    public User vcSUserNames(List<VcsUserName> vcSUserNames) {
        this.vcSUserNames = vcSUserNames;
        return this;
    }

    public User addVcSUserNamesItem(VcsUserName vcSUserNamesItem) {
        if (this.vcSUserNames == null) {
            this.vcSUserNames = new ArrayList<VcsUserName>();
        }
        this.vcSUserNames.add(vcSUserNamesItem);
        return this;
    }

    /**
     * Get vcSUserNames
     *
     * @return vcSUserNames
     **/
    @Schema(description = "")
    public List<VcsUserName> getVcSUserNames() {
        return vcSUserNames;
    }

    public void setVcSUserNames(List<VcsUserName> vcSUserNames) {
        this.vcSUserNames = vcSUserNames;
    }

    public User sshPublicKeys(List<SshPublicKey> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    public User addSshPublicKeysItem(SshPublicKey sshPublicKeysItem) {
        if (this.sshPublicKeys == null) {
            this.sshPublicKeys = new ArrayList<SshPublicKey>();
        }
        this.sshPublicKeys.add(sshPublicKeysItem);
        return this;
    }

    /**
     * Get sshPublicKeys
     *
     * @return sshPublicKeys
     **/
    @Schema(description = "")
    public List<SshPublicKey> getSshPublicKeys() {
        return sshPublicKeys;
    }

    public void setSshPublicKeys(List<SshPublicKey> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
    }

    public User licenses(List<License> licenses) {
        this.licenses = licenses;
        return this;
    }

    public User addLicensesItem(License licensesItem) {
        if (this.licenses == null) {
            this.licenses = new ArrayList<License>();
        }
        this.licenses.add(licensesItem);
        return this;
    }

    /**
     * Get licenses
     *
     * @return licenses
     **/
    @Schema(description = "")
    public List<License> getLicenses() {
        return licenses;
    }

    public void setLicenses(List<License> licenses) {
        this.licenses = licenses;
    }

    public User helpdeskProjectSettings(List<ProjectHelpdeskSettings> helpdeskProjectSettings) {
        this.helpdeskProjectSettings = helpdeskProjectSettings;
        return this;
    }

    public User addHelpdeskProjectSettingsItem(ProjectHelpdeskSettings helpdeskProjectSettingsItem) {
        if (this.helpdeskProjectSettings == null) {
            this.helpdeskProjectSettings = new ArrayList<ProjectHelpdeskSettings>();
        }
        this.helpdeskProjectSettings.add(helpdeskProjectSettingsItem);
        return this;
    }

    /**
     * Get helpdeskProjectSettings
     *
     * @return helpdeskProjectSettings
     **/
    @Schema(description = "")
    public List<ProjectHelpdeskSettings> getHelpdeskProjectSettings() {
        return helpdeskProjectSettings;
    }

    public void setHelpdeskProjectSettings(List<ProjectHelpdeskSettings> helpdeskProjectSettings) {
        this.helpdeskProjectSettings = helpdeskProjectSettings;
    }

    public User creationTime(Long creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get creationTime
     *
     * @return creationTime
     **/
    @Schema(description = "")
    public Long getCreationTime() {
        return creationTime;
    }

    public void setCreationTime(Long creationTime) {
        this.creationTime = creationTime;
    }

    public User lastAccessTime(Long lastAccessTime) {
        this.lastAccessTime = lastAccessTime;
        return this;
    }

    /**
     * Get lastAccessTime
     *
     * @return lastAccessTime
     **/
    @Schema(description = "")
    public Long getLastAccessTime() {
        return lastAccessTime;
    }

    public void setLastAccessTime(Long lastAccessTime) {
        this.lastAccessTime = lastAccessTime;
    }

    public User refreshTokens(List<RefreshToken> refreshTokens) {
        this.refreshTokens = refreshTokens;
        return this;
    }

    public User addRefreshTokensItem(RefreshToken refreshTokensItem) {
        if (this.refreshTokens == null) {
            this.refreshTokens = new ArrayList<RefreshToken>();
        }
        this.refreshTokens.add(refreshTokensItem);
        return this;
    }

    /**
     * Get refreshTokens
     *
     * @return refreshTokens
     **/
    @Schema(description = "")
    public List<RefreshToken> getRefreshTokens() {
        return refreshTokens;
    }

    public void setRefreshTokens(List<RefreshToken> refreshTokens) {
        this.refreshTokens = refreshTokens;
    }

    public User permanentTokens(List<PermanentToken> permanentTokens) {
        this.permanentTokens = permanentTokens;
        return this;
    }

    public User addPermanentTokensItem(PermanentToken permanentTokensItem) {
        if (this.permanentTokens == null) {
            this.permanentTokens = new ArrayList<PermanentToken>();
        }
        this.permanentTokens.add(permanentTokensItem);
        return this;
    }

    /**
     * Get permanentTokens
     *
     * @return permanentTokens
     **/
    @Schema(description = "")
    public List<PermanentToken> getPermanentTokens() {
        return permanentTokens;
    }

    public void setPermanentTokens(List<PermanentToken> permanentTokens) {
        this.permanentTokens = permanentTokens;
    }

    public User approvedScopes(List<ApprovedScope> approvedScopes) {
        this.approvedScopes = approvedScopes;
        return this;
    }

    public User addApprovedScopesItem(ApprovedScope approvedScopesItem) {
        if (this.approvedScopes == null) {
            this.approvedScopes = new ArrayList<ApprovedScope>();
        }
        this.approvedScopes.add(approvedScopesItem);
        return this;
    }

    /**
     * Get approvedScopes
     *
     * @return approvedScopes
     **/
    @Schema(description = "")
    public List<ApprovedScope> getApprovedScopes() {
        return approvedScopes;
    }

    public void setApprovedScopes(List<ApprovedScope> approvedScopes) {
        this.approvedScopes = approvedScopes;
    }

    public User applicationPasswords(List<ApplicationPassword> applicationPasswords) {
        this.applicationPasswords = applicationPasswords;
        return this;
    }

    public User addApplicationPasswordsItem(ApplicationPassword applicationPasswordsItem) {
        if (this.applicationPasswords == null) {
            this.applicationPasswords = new ArrayList<ApplicationPassword>();
        }
        this.applicationPasswords.add(applicationPasswordsItem);
        return this;
    }

    /**
     * Get applicationPasswords
     *
     * @return applicationPasswords
     **/
    @Schema(description = "")
    public List<ApplicationPassword> getApplicationPasswords() {
        return applicationPasswords;
    }

    public void setApplicationPasswords(List<ApplicationPassword> applicationPasswords) {
        this.applicationPasswords = applicationPasswords;
    }

    public User favoriteProjects(List<Project> favoriteProjects) {
        this.favoriteProjects = favoriteProjects;
        return this;
    }

    public User addFavoriteProjectsItem(Project favoriteProjectsItem) {
        if (this.favoriteProjects == null) {
            this.favoriteProjects = new ArrayList<Project>();
        }
        this.favoriteProjects.add(favoriteProjectsItem);
        return this;
    }

    /**
     * Get favoriteProjects
     *
     * @return favoriteProjects
     **/
    @Schema(description = "")
    public List<Project> getFavoriteProjects() {
        return favoriteProjects;
    }

    public void setFavoriteProjects(List<Project> favoriteProjects) {
        this.favoriteProjects = favoriteProjects;
    }

    public User endUserAgreementConsent(EndUserAgreementConsent endUserAgreementConsent) {
        this.endUserAgreementConsent = endUserAgreementConsent;
        return this;
    }

    /**
     * Get endUserAgreementConsent
     *
     * @return endUserAgreementConsent
     **/
    @Schema(description = "")
    public EndUserAgreementConsent getEndUserAgreementConsent() {
        return endUserAgreementConsent;
    }

    public void setEndUserAgreementConsent(EndUserAgreementConsent endUserAgreementConsent) {
        this.endUserAgreementConsent = endUserAgreementConsent;
    }

    public User eraseTimestamp(Long eraseTimestamp) {
        this.eraseTimestamp = eraseTimestamp;
        return this;
    }

    /**
     * Get eraseTimestamp
     *
     * @return eraseTimestamp
     **/
    @Schema(description = "")
    public Long getEraseTimestamp() {
        return eraseTimestamp;
    }

    public void setEraseTimestamp(Long eraseTimestamp) {
        this.eraseTimestamp = eraseTimestamp;
    }

    public User twoFactorAuthentication(TwoFactorAuthentication twoFactorAuthentication) {
        this.twoFactorAuthentication = twoFactorAuthentication;
        return this;
    }

    /**
     * Get twoFactorAuthentication
     *
     * @return twoFactorAuthentication
     **/
    @Schema(description = "")
    public TwoFactorAuthentication getTwoFactorAuthentication() {
        return twoFactorAuthentication;
    }

    public void setTwoFactorAuthentication(TwoFactorAuthentication twoFactorAuthentication) {
        this.twoFactorAuthentication = twoFactorAuthentication;
    }

    public User requiredTwoFactorAuthentication(Boolean requiredTwoFactorAuthentication) {
        this.requiredTwoFactorAuthentication = requiredTwoFactorAuthentication;
        return this;
    }

    /**
     * Get requiredTwoFactorAuthentication
     *
     * @return requiredTwoFactorAuthentication
     **/
    @Schema(description = "")
    public Boolean isRequiredTwoFactorAuthentication() {
        return requiredTwoFactorAuthentication;
    }

    public void setRequiredTwoFactorAuthentication(Boolean requiredTwoFactorAuthentication) {
        this.requiredTwoFactorAuthentication = requiredTwoFactorAuthentication;
    }

    public User pendingTwoFactorAuthentication(TwoFactorAuthenticationSecret pendingTwoFactorAuthentication) {
        this.pendingTwoFactorAuthentication = pendingTwoFactorAuthentication;
        return this;
    }

    /**
     * Get pendingTwoFactorAuthentication
     *
     * @return pendingTwoFactorAuthentication
     **/
    @Schema(description = "")
    public TwoFactorAuthenticationSecret getPendingTwoFactorAuthentication() {
        return pendingTwoFactorAuthentication;
    }

    public void setPendingTwoFactorAuthentication(TwoFactorAuthenticationSecret pendingTwoFactorAuthentication) {
        this.pendingTwoFactorAuthentication = pendingTwoFactorAuthentication;
    }

    public User webauthnDevice(WebauthnDevice webauthnDevice) {
        this.webauthnDevice = webauthnDevice;
        return this;
    }

    /**
     * Get webauthnDevice
     *
     * @return webauthnDevice
     **/
    @Schema(description = "")
    public WebauthnDevice getWebauthnDevice() {
        return webauthnDevice;
    }

    public void setWebauthnDevice(WebauthnDevice webauthnDevice) {
        this.webauthnDevice = webauthnDevice;
    }

    public User userType(UserType userType) {
        this.userType = userType;
        return this;
    }

    /**
     * Get userType
     *
     * @return userType
     **/
    @Schema(description = "")
    public UserType getUserType() {
        return userType;
    }

    public void setUserType(UserType userType) {
        this.userType = userType;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User user = (User) o;
        return Objects.equals(this.login, user.login) &&
                Objects.equals(this.banned, user.banned) &&
                Objects.equals(this.banReason, user.banReason) &&
                Objects.equals(this.banBadge, user.banBadge) &&
                Objects.equals(this.guest, user.guest) &&
                Objects.equals(this.avatar, user.avatar) &&
                Objects.equals(this.profile, user.profile) &&
                Objects.equals(this.groups, user.groups) &&
                Objects.equals(this.organizations, user.organizations) &&
                Objects.equals(this.transitiveOrganizations, user.transitiveOrganizations) &&
                Objects.equals(this.transitiveGroups, user.transitiveGroups) &&
                Objects.equals(this.teams, user.teams) &&
                Objects.equals(this.transitiveTeams, user.transitiveTeams) &&
                Objects.equals(this.details, user.details) &&
                Objects.equals(this.vcSUserNames, user.vcSUserNames) &&
                Objects.equals(this.sshPublicKeys, user.sshPublicKeys) &&
                Objects.equals(this.licenses, user.licenses) &&
                Objects.equals(this.helpdeskProjectSettings, user.helpdeskProjectSettings) &&
                Objects.equals(this.creationTime, user.creationTime) &&
                Objects.equals(this.lastAccessTime, user.lastAccessTime) &&
                Objects.equals(this.refreshTokens, user.refreshTokens) &&
                Objects.equals(this.permanentTokens, user.permanentTokens) &&
                Objects.equals(this.approvedScopes, user.approvedScopes) &&
                Objects.equals(this.applicationPasswords, user.applicationPasswords) &&
                Objects.equals(this.favoriteProjects, user.favoriteProjects) &&
                Objects.equals(this.endUserAgreementConsent, user.endUserAgreementConsent) &&
                Objects.equals(this.eraseTimestamp, user.eraseTimestamp) &&
                Objects.equals(this.twoFactorAuthentication, user.twoFactorAuthentication) &&
                Objects.equals(this.requiredTwoFactorAuthentication, user.requiredTwoFactorAuthentication) &&
                Objects.equals(this.pendingTwoFactorAuthentication, user.pendingTwoFactorAuthentication) &&
                Objects.equals(this.webauthnDevice, user.webauthnDevice) &&
                Objects.equals(this.userType, user.userType) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(login, banned, banReason, banBadge, guest, avatar, profile, groups, organizations, transitiveOrganizations, transitiveGroups, teams, transitiveTeams, details, vcSUserNames, sshPublicKeys, licenses, helpdeskProjectSettings, creationTime, lastAccessTime, refreshTokens, permanentTokens, approvedScopes, applicationPasswords, favoriteProjects, endUserAgreementConsent, eraseTimestamp, twoFactorAuthentication, requiredTwoFactorAuthentication, pendingTwoFactorAuthentication, webauthnDevice, userType, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class User {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    login: " + toIndentedString(login) + "\n" +
                "    banned: " + toIndentedString(banned) + "\n" +
                "    banReason: " + toIndentedString(banReason) + "\n" +
                "    banBadge: " + toIndentedString(banBadge) + "\n" +
                "    guest: " + toIndentedString(guest) + "\n" +
                "    avatar: " + toIndentedString(avatar) + "\n" +
                "    profile: " + toIndentedString(profile) + "\n" +
                "    groups: " + toIndentedString(groups) + "\n" +
                "    organizations: " + toIndentedString(organizations) + "\n" +
                "    transitiveOrganizations: " + toIndentedString(transitiveOrganizations) + "\n" +
                "    transitiveGroups: " + toIndentedString(transitiveGroups) + "\n" +
                "    teams: " + toIndentedString(teams) + "\n" +
                "    transitiveTeams: " + toIndentedString(transitiveTeams) + "\n" +
                "    details: " + toIndentedString(details) + "\n" +
                "    vcSUserNames: " + toIndentedString(vcSUserNames) + "\n" +
                "    sshPublicKeys: " + toIndentedString(sshPublicKeys) + "\n" +
                "    licenses: " + toIndentedString(licenses) + "\n" +
                "    helpdeskProjectSettings: " + toIndentedString(helpdeskProjectSettings) + "\n" +
                "    creationTime: " + toIndentedString(creationTime) + "\n" +
                "    lastAccessTime: " + toIndentedString(lastAccessTime) + "\n" +
                "    refreshTokens: " + toIndentedString(refreshTokens) + "\n" +
                "    permanentTokens: " + toIndentedString(permanentTokens) + "\n" +
                "    approvedScopes: " + toIndentedString(approvedScopes) + "\n" +
                "    applicationPasswords: " + toIndentedString(applicationPasswords) + "\n" +
                "    favoriteProjects: " + toIndentedString(favoriteProjects) + "\n" +
                "    endUserAgreementConsent: " + toIndentedString(endUserAgreementConsent) + "\n" +
                "    eraseTimestamp: " + toIndentedString(eraseTimestamp) + "\n" +
                "    twoFactorAuthentication: " + toIndentedString(twoFactorAuthentication) + "\n" +
                "    requiredTwoFactorAuthentication: " + toIndentedString(requiredTwoFactorAuthentication) + "\n" +
                "    pendingTwoFactorAuthentication: " + toIndentedString(pendingTwoFactorAuthentication) + "\n" +
                "    webauthnDevice: " + toIndentedString(webauthnDevice) + "\n" +
                "    userType: " + toIndentedString(userType) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

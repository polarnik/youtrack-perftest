/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ThrottlingSettings
 */


public class ThrottlingSettings extends Settings {
    @SerializedName("enabled")
    private Boolean enabled = null;

    @SerializedName("whiteList")
    private List<String> whiteList = null;

    @SerializedName("maxTrackingKeys")
    private Integer maxTrackingKeys = null;

    @SerializedName("maxFailuresPerKey")
    private Integer maxFailuresPerKey = null;

    @SerializedName("cooldownValue")
    private Integer cooldownValue = null;

    @SerializedName("cooldownPeriodSec")
    private Long cooldownPeriodSec = null;

    @SerializedName("blockedKeys")
    private BlockedKeys blockedKeys = null;

    public ThrottlingSettings enabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     **/
    @Schema(description = "")
    public Boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ThrottlingSettings whiteList(List<String> whiteList) {
        this.whiteList = whiteList;
        return this;
    }

    public ThrottlingSettings addWhiteListItem(String whiteListItem) {
        if (this.whiteList == null) {
            this.whiteList = new ArrayList<String>();
        }
        this.whiteList.add(whiteListItem);
        return this;
    }

    /**
     * Get whiteList
     *
     * @return whiteList
     **/
    @Schema(description = "")
    public List<String> getWhiteList() {
        return whiteList;
    }

    public void setWhiteList(List<String> whiteList) {
        this.whiteList = whiteList;
    }

    public ThrottlingSettings maxTrackingKeys(Integer maxTrackingKeys) {
        this.maxTrackingKeys = maxTrackingKeys;
        return this;
    }

    /**
     * Get maxTrackingKeys
     *
     * @return maxTrackingKeys
     **/
    @Schema(description = "")
    public Integer getMaxTrackingKeys() {
        return maxTrackingKeys;
    }

    public void setMaxTrackingKeys(Integer maxTrackingKeys) {
        this.maxTrackingKeys = maxTrackingKeys;
    }

    public ThrottlingSettings maxFailuresPerKey(Integer maxFailuresPerKey) {
        this.maxFailuresPerKey = maxFailuresPerKey;
        return this;
    }

    /**
     * Get maxFailuresPerKey
     *
     * @return maxFailuresPerKey
     **/
    @Schema(description = "")
    public Integer getMaxFailuresPerKey() {
        return maxFailuresPerKey;
    }

    public void setMaxFailuresPerKey(Integer maxFailuresPerKey) {
        this.maxFailuresPerKey = maxFailuresPerKey;
    }

    public ThrottlingSettings cooldownValue(Integer cooldownValue) {
        this.cooldownValue = cooldownValue;
        return this;
    }

    /**
     * Get cooldownValue
     *
     * @return cooldownValue
     **/
    @Schema(description = "")
    public Integer getCooldownValue() {
        return cooldownValue;
    }

    public void setCooldownValue(Integer cooldownValue) {
        this.cooldownValue = cooldownValue;
    }

    public ThrottlingSettings cooldownPeriodSec(Long cooldownPeriodSec) {
        this.cooldownPeriodSec = cooldownPeriodSec;
        return this;
    }

    /**
     * Get cooldownPeriodSec
     *
     * @return cooldownPeriodSec
     **/
    @Schema(description = "")
    public Long getCooldownPeriodSec() {
        return cooldownPeriodSec;
    }

    public void setCooldownPeriodSec(Long cooldownPeriodSec) {
        this.cooldownPeriodSec = cooldownPeriodSec;
    }

    public ThrottlingSettings blockedKeys(BlockedKeys blockedKeys) {
        this.blockedKeys = blockedKeys;
        return this;
    }

    /**
     * Get blockedKeys
     *
     * @return blockedKeys
     **/
    @Schema(description = "")
    public BlockedKeys getBlockedKeys() {
        return blockedKeys;
    }

    public void setBlockedKeys(BlockedKeys blockedKeys) {
        this.blockedKeys = blockedKeys;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThrottlingSettings throttlingSettings = (ThrottlingSettings) o;
        return Objects.equals(this.enabled, throttlingSettings.enabled) &&
                Objects.equals(this.whiteList, throttlingSettings.whiteList) &&
                Objects.equals(this.maxTrackingKeys, throttlingSettings.maxTrackingKeys) &&
                Objects.equals(this.maxFailuresPerKey, throttlingSettings.maxFailuresPerKey) &&
                Objects.equals(this.cooldownValue, throttlingSettings.cooldownValue) &&
                Objects.equals(this.cooldownPeriodSec, throttlingSettings.cooldownPeriodSec) &&
                Objects.equals(this.blockedKeys, throttlingSettings.blockedKeys) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enabled, whiteList, maxTrackingKeys, maxFailuresPerKey, cooldownValue, cooldownPeriodSec, blockedKeys, super.hashCode());
    }


    @Override
    public String toString() {
        String sb = "class ThrottlingSettings {\n" +
                "    " + toIndentedString(super.toString()) + "\n" +
                "    enabled: " + toIndentedString(enabled) + "\n" +
                "    whiteList: " + toIndentedString(whiteList) + "\n" +
                "    maxTrackingKeys: " + toIndentedString(maxTrackingKeys) + "\n" +
                "    maxFailuresPerKey: " + toIndentedString(maxFailuresPerKey) + "\n" +
                "    cooldownValue: " + toIndentedString(cooldownValue) + "\n" +
                "    cooldownPeriodSec: " + toIndentedString(cooldownPeriodSec) + "\n" +
                "    blockedKeys: " + toIndentedString(blockedKeys) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

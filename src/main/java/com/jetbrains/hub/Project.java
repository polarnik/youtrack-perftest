/*
 * Hub REST API
 * JetBrains Teamware Connector
 *
 * OpenAPI spec version: 2024.2.38971
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.jetbrains.hub;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Project
 */


public class Project {
    @SerializedName("id")
    private String id = null;

    @SerializedName("aliases")
    private List<Alias> aliases = null;

    @SerializedName("key")
    private String key = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("archived")
    private Boolean archived = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("creationTime")
    private Long creationTime = null;

    @SerializedName("iconUrl")
    private String iconUrl = null;

    @SerializedName("icon")
    private String icon = null;

    @SerializedName("defaultIcon")
    private Boolean defaultIcon = null;

    @SerializedName("resources")
    private List<Resource> resources = null;

    @SerializedName("projectRoles")
    private List<ProjectRole> projectRoles = null;

    @SerializedName("transitiveProjectRoles")
    private List<ProjectRole> transitiveProjectRoles = null;

    @SerializedName("myFavorite")
    private Boolean myFavorite = null;

    @SerializedName("team")
    private ProjectTeam team = null;

    @SerializedName("owner")
    private User owner = null;

    @SerializedName("global")
    private Boolean global = null;

    @SerializedName("restricted")
    private Boolean restricted = null;

    @SerializedName("dashboard")
    private String dashboard = null;

    @SerializedName("organization")
    private Organization organization = null;

    @SerializedName("projectType")
    private ProjectType projectType = null;

    @SerializedName("helpdeskSettings")
    private ProjectHelpdeskSettings helpdeskSettings = null;

    public Project id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Project aliases(List<Alias> aliases) {
        this.aliases = aliases;
        return this;
    }

    public Project addAliasesItem(Alias aliasesItem) {
        if (this.aliases == null) {
            this.aliases = new ArrayList<Alias>();
        }
        this.aliases.add(aliasesItem);
        return this;
    }

    /**
     * Get aliases
     *
     * @return aliases
     **/
    @Schema(description = "")
    public List<Alias> getAliases() {
        return aliases;
    }

    public void setAliases(List<Alias> aliases) {
        this.aliases = aliases;
    }

    public Project key(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get key
     *
     * @return key
     **/
    @Schema(description = "")
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public Project name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Schema(description = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Project archived(Boolean archived) {
        this.archived = archived;
        return this;
    }

    /**
     * Get archived
     *
     * @return archived
     **/
    @Schema(description = "")
    public Boolean isArchived() {
        return archived;
    }

    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    public Project description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     **/
    @Schema(description = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Project creationTime(Long creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get creationTime
     *
     * @return creationTime
     **/
    @Schema(description = "")
    public Long getCreationTime() {
        return creationTime;
    }

    public void setCreationTime(Long creationTime) {
        this.creationTime = creationTime;
    }

    public Project iconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * Get iconUrl
     *
     * @return iconUrl
     **/
    @Schema(description = "")
    public String getIconUrl() {
        return iconUrl;
    }

    public void setIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
    }

    public Project icon(String icon) {
        this.icon = icon;
        return this;
    }

    /**
     * Get icon
     *
     * @return icon
     **/
    @Schema(description = "")
    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }

    public Project defaultIcon(Boolean defaultIcon) {
        this.defaultIcon = defaultIcon;
        return this;
    }

    /**
     * Get defaultIcon
     *
     * @return defaultIcon
     **/
    @Schema(description = "")
    public Boolean isDefaultIcon() {
        return defaultIcon;
    }

    public void setDefaultIcon(Boolean defaultIcon) {
        this.defaultIcon = defaultIcon;
    }

    public Project resources(List<Resource> resources) {
        this.resources = resources;
        return this;
    }

    public Project addResourcesItem(Resource resourcesItem) {
        if (this.resources == null) {
            this.resources = new ArrayList<Resource>();
        }
        this.resources.add(resourcesItem);
        return this;
    }

    /**
     * Get resources
     *
     * @return resources
     **/
    @Schema(description = "")
    public List<Resource> getResources() {
        return resources;
    }

    public void setResources(List<Resource> resources) {
        this.resources = resources;
    }

    public Project projectRoles(List<ProjectRole> projectRoles) {
        this.projectRoles = projectRoles;
        return this;
    }

    public Project addProjectRolesItem(ProjectRole projectRolesItem) {
        if (this.projectRoles == null) {
            this.projectRoles = new ArrayList<ProjectRole>();
        }
        this.projectRoles.add(projectRolesItem);
        return this;
    }

    /**
     * Get projectRoles
     *
     * @return projectRoles
     **/
    @Schema(description = "")
    public List<ProjectRole> getProjectRoles() {
        return projectRoles;
    }

    public void setProjectRoles(List<ProjectRole> projectRoles) {
        this.projectRoles = projectRoles;
    }

    public Project transitiveProjectRoles(List<ProjectRole> transitiveProjectRoles) {
        this.transitiveProjectRoles = transitiveProjectRoles;
        return this;
    }

    public Project addTransitiveProjectRolesItem(ProjectRole transitiveProjectRolesItem) {
        if (this.transitiveProjectRoles == null) {
            this.transitiveProjectRoles = new ArrayList<ProjectRole>();
        }
        this.transitiveProjectRoles.add(transitiveProjectRolesItem);
        return this;
    }

    /**
     * Get transitiveProjectRoles
     *
     * @return transitiveProjectRoles
     **/
    @Schema(description = "")
    public List<ProjectRole> getTransitiveProjectRoles() {
        return transitiveProjectRoles;
    }

    public void setTransitiveProjectRoles(List<ProjectRole> transitiveProjectRoles) {
        this.transitiveProjectRoles = transitiveProjectRoles;
    }

    public Project myFavorite(Boolean myFavorite) {
        this.myFavorite = myFavorite;
        return this;
    }

    /**
     * Get myFavorite
     *
     * @return myFavorite
     **/
    @Schema(description = "")
    public Boolean isMyFavorite() {
        return myFavorite;
    }

    public void setMyFavorite(Boolean myFavorite) {
        this.myFavorite = myFavorite;
    }

    public Project team(ProjectTeam team) {
        this.team = team;
        return this;
    }

    /**
     * Get team
     *
     * @return team
     **/
    @Schema(description = "")
    public ProjectTeam getTeam() {
        return team;
    }

    public void setTeam(ProjectTeam team) {
        this.team = team;
    }

    public Project owner(User owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Get owner
     *
     * @return owner
     **/
    @Schema(description = "")
    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }

    public Project global(Boolean global) {
        this.global = global;
        return this;
    }

    /**
     * Get global
     *
     * @return global
     **/
    @Schema(description = "")
    public Boolean isGlobal() {
        return global;
    }

    public void setGlobal(Boolean global) {
        this.global = global;
    }

    public Project restricted(Boolean restricted) {
        this.restricted = restricted;
        return this;
    }

    /**
     * Get restricted
     *
     * @return restricted
     **/
    @Schema(description = "")
    public Boolean isRestricted() {
        return restricted;
    }

    public void setRestricted(Boolean restricted) {
        this.restricted = restricted;
    }

    public Project dashboard(String dashboard) {
        this.dashboard = dashboard;
        return this;
    }

    /**
     * Get dashboard
     *
     * @return dashboard
     **/
    @Schema(description = "")
    public String getDashboard() {
        return dashboard;
    }

    public void setDashboard(String dashboard) {
        this.dashboard = dashboard;
    }

    public Project organization(Organization organization) {
        this.organization = organization;
        return this;
    }

    /**
     * Get organization
     *
     * @return organization
     **/
    @Schema(description = "")
    public Organization getOrganization() {
        return organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    public Project projectType(ProjectType projectType) {
        this.projectType = projectType;
        return this;
    }

    /**
     * Get projectType
     *
     * @return projectType
     **/
    @Schema(description = "")
    public ProjectType getProjectType() {
        return projectType;
    }

    public void setProjectType(ProjectType projectType) {
        this.projectType = projectType;
    }

    public Project helpdeskSettings(ProjectHelpdeskSettings helpdeskSettings) {
        this.helpdeskSettings = helpdeskSettings;
        return this;
    }

    /**
     * Get helpdeskSettings
     *
     * @return helpdeskSettings
     **/
    @Schema(description = "")
    public ProjectHelpdeskSettings getHelpdeskSettings() {
        return helpdeskSettings;
    }

    public void setHelpdeskSettings(ProjectHelpdeskSettings helpdeskSettings) {
        this.helpdeskSettings = helpdeskSettings;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Project project = (Project) o;
        return Objects.equals(this.id, project.id) &&
                Objects.equals(this.aliases, project.aliases) &&
                Objects.equals(this.key, project.key) &&
                Objects.equals(this.name, project.name) &&
                Objects.equals(this.archived, project.archived) &&
                Objects.equals(this.description, project.description) &&
                Objects.equals(this.creationTime, project.creationTime) &&
                Objects.equals(this.iconUrl, project.iconUrl) &&
                Objects.equals(this.icon, project.icon) &&
                Objects.equals(this.defaultIcon, project.defaultIcon) &&
                Objects.equals(this.resources, project.resources) &&
                Objects.equals(this.projectRoles, project.projectRoles) &&
                Objects.equals(this.transitiveProjectRoles, project.transitiveProjectRoles) &&
                Objects.equals(this.myFavorite, project.myFavorite) &&
                Objects.equals(this.team, project.team) &&
                Objects.equals(this.owner, project.owner) &&
                Objects.equals(this.global, project.global) &&
                Objects.equals(this.restricted, project.restricted) &&
                Objects.equals(this.dashboard, project.dashboard) &&
                Objects.equals(this.organization, project.organization) &&
                Objects.equals(this.projectType, project.projectType) &&
                Objects.equals(this.helpdeskSettings, project.helpdeskSettings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, aliases, key, name, archived, description, creationTime, iconUrl, icon, defaultIcon, resources, projectRoles, transitiveProjectRoles, myFavorite, team, owner, global, restricted, dashboard, organization, projectType, helpdeskSettings);
    }


    @Override
    public String toString() {

        String sb = "class Project {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    aliases: " + toIndentedString(aliases) + "\n" +
                "    key: " + toIndentedString(key) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    archived: " + toIndentedString(archived) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    creationTime: " + toIndentedString(creationTime) + "\n" +
                "    iconUrl: " + toIndentedString(iconUrl) + "\n" +
                "    icon: " + toIndentedString(icon) + "\n" +
                "    defaultIcon: " + toIndentedString(defaultIcon) + "\n" +
                "    resources: " + toIndentedString(resources) + "\n" +
                "    projectRoles: " + toIndentedString(projectRoles) + "\n" +
                "    transitiveProjectRoles: " + toIndentedString(transitiveProjectRoles) + "\n" +
                "    myFavorite: " + toIndentedString(myFavorite) + "\n" +
                "    team: " + toIndentedString(team) + "\n" +
                "    owner: " + toIndentedString(owner) + "\n" +
                "    global: " + toIndentedString(global) + "\n" +
                "    restricted: " + toIndentedString(restricted) + "\n" +
                "    dashboard: " + toIndentedString(dashboard) + "\n" +
                "    organization: " + toIndentedString(organization) + "\n" +
                "    projectType: " + toIndentedString(projectType) + "\n" +
                "    helpdeskSettings: " + toIndentedString(helpdeskSettings) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
